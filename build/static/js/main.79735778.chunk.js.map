{"version":3,"sources":["serviceWorker.js","reducers/state-of-game/actions.js","reducers/state-of-game/reducer.js","reducers/app.js","reducers/index.js","reducers/store.js","components/nav-bar/component.jsx","routes/urls.js","pages/landing-page/menu-selection/component.jsx","pages/landing-page/component.jsx","pages/play-against-friend/controller.js","components/square/component.jsx","components/board/component.jsx","pages/play-against-friend/component.jsx","pages/play-against-friend/container.js","routes/component.jsx","index.jsx"],"names":["Boolean","window","location","hostname","match","selectSquare","action","goToMove","initialState","history","Array","fill","xIsNext","moveNumber","combineReducers","status","state","type","slice","payload","currentMovesPlayed","length","app","createStore","reducers","composeWithDevTools","NavigationBar","Navbar","className","to","MenuSelection","Container","Button","variant","size","LandingPage","calculateWinner","currentlyPlayedMoves","possibleWinningCombinations","winningCombinationIndex","a","b","c","Square","onClick","value","defaultProps","Board","squares","Row","PlayAgainstFriend","onSelectSquare","previousPlayerMoves","winner","data-qa","determineGameStatus","map","index","buttonName","buttonClick","key","squareIndex","connect","dispatch","nextPlayer","currentHistory","currentSquaresPlayed","getCurrentMovesPlayed","jumpTo","step","stateProps","dispatchProps","_","moveId","NavigationRoutes","exact","path","component","root","document","getElementById","render","store","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79735778.chunk.js","sourcesContent":["/* eslint-disable no-console */\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    window.location.hostname === '[::1]' ||\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      const registry = registration;\r\n      registry.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              console.log('Content is cached for offline use.');\r\n\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import action from 'payload-action-creator';\r\n\r\nexport const SELECT_SQUARE = 'SELECT_SQUARE';\r\nexport const GO_TO_MOVE = 'GO_TO_MOVE';\r\n\r\nexport const selectSquare = action(SELECT_SQUARE);\r\nexport const goToMove = action(GO_TO_MOVE);\r\n","import { SELECT_SQUARE, GO_TO_MOVE } from './actions';\r\n\r\nexport const initialState = {\r\n  history: [Array(9).fill('')],\r\n  xIsNext: true,\r\n  moveNumber: 0,\r\n};\r\n\r\nexport default (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case GO_TO_MOVE:\r\n      return {\r\n        ...state,\r\n        history: state.history.slice(0, action.payload + 1),\r\n        moveNumber: action.payload,\r\n        xIsNext: !(action.payload % 2),\r\n      };\r\n    case SELECT_SQUARE:\r\n      return {\r\n        ...state,\r\n        history: [...state.history, action.payload.currentMovesPlayed],\r\n        xIsNext: !state.xIsNext,\r\n        moveNumber: state.history.length,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\n\r\nimport status from './state-of-game';\r\n\r\nexport default combineReducers({ status });\r\n","import { combineReducers } from 'redux';\r\n\r\nimport app from './app';\r\n\r\nexport default combineReducers({ app });\r\n","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport reducers from './index';\r\n\r\nexport default createStore(reducers, composeWithDevTools());\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nimport './component.css';\r\n\r\nimport { LANDING_PAGE, COMPUTER, PLAYER, SCORE_BOARD } from '../../routes/urls';\r\n\r\nconst NavigationBar = () => (\r\n  <Navbar className=\"navigation-bar\">\r\n    <NavLink className=\"home-link\" to={LANDING_PAGE}>\r\n      Tic-Tac-Toe\r\n    </NavLink>\r\n    <NavLink className=\"nav-link\" to={COMPUTER}>\r\n      VS Computer\r\n    </NavLink>\r\n    <NavLink className=\"nav-link\" to={PLAYER}>\r\n      VS Friend\r\n    </NavLink>\r\n    <NavLink className=\"nav-link\" to={SCORE_BOARD}>\r\n      Score Board\r\n    </NavLink>\r\n  </Navbar>\r\n);\r\n\r\nexport default NavigationBar;\r\n","export const LANDING_PAGE = '/';\r\nexport const COMPUTER = '/Computer';\r\nexport const PLAYER = '/Player';\r\nexport const SCORE_BOARD = '/ScoreBoard';\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container } from 'react-bootstrap';\r\n\r\nimport { COMPUTER, PLAYER, SCORE_BOARD } from '../../../routes/urls';\r\n\r\nconst MenuSelection = () => (\r\n  <Container className=\"game-selection-menu\">\r\n    <h3 className=\"game-selection-header\">Game Selection</h3>\r\n    <Link to={COMPUTER}>\r\n      <Button variant=\"dark\" size=\"lg\" className=\"selection-button\">\r\n        VS Computer\r\n      </Button>\r\n    </Link>\r\n    <Link to={PLAYER}>\r\n      <Button variant=\"dark\" size=\"lg\" className=\"selection-button\">\r\n        VS Friend\r\n      </Button>\r\n    </Link>\r\n    <Link to={SCORE_BOARD}>\r\n      <Button variant=\"dark\" size=\"lg\" className=\"selection-button\">\r\n        Score Board\r\n      </Button>\r\n    </Link>\r\n  </Container>\r\n);\r\n\r\nexport default MenuSelection;\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nimport './component.css';\r\n\r\nimport MenuSelection from './menu-selection';\r\n\r\nconst LandingPage = () => (\r\n  <Container>\r\n    <Container className=\"game-description\">\r\n      <h3>\r\n        This adaptation of the classic Tic-Tac-Toe where players are able to go\r\n        through their previous moves, play against a friend or against the\r\n        computer\r\n      </h3>\r\n      <h5>Choose a selection & start playing!</h5>\r\n    </Container>\r\n    <MenuSelection />\r\n  </Container>\r\n);\r\n\r\nexport default LandingPage;\r\n","export const calculateWinner = (currentlyPlayedMoves) => {\r\n  const possibleWinningCombinations = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  /* For loop that goes through & checks that the array has the\r\n   winner combination positions in it */\r\n  for (\r\n    let winningCombinationIndex = 0;\r\n    winningCombinationIndex < possibleWinningCombinations.length;\r\n    winningCombinationIndex += 1\r\n  ) {\r\n    const [a, b, c] = possibleWinningCombinations[winningCombinationIndex];\r\n    /* If statement checks the 1st winning position in the array\r\n     equals the other 2 positions the returns the 1st position */\r\n    if (\r\n      currentlyPlayedMoves[a] &&\r\n      currentlyPlayedMoves[a] === currentlyPlayedMoves[b] &&\r\n      currentlyPlayedMoves[a] === currentlyPlayedMoves[c]\r\n    ) {\r\n      return currentlyPlayedMoves[a];\r\n    }\r\n  }\r\n  return undefined;\r\n};\r\n\r\nexport const determineGameStatus = (winner, moveNumber, xIsNext) => {\r\n  if (winner) {\r\n    return `${winner} is the Winner!`;\r\n  }\r\n  if (!winner && moveNumber === 9) {\r\n    return 'Its a Draw!';\r\n  }\r\n  return `Next player is ${xIsNext ? 'X' : 'O'}`;\r\n};\r\n\r\nexport const getCurrentMovesPlayed = (history, moveNumber) => {\r\n  const currentHistory = history.slice(0, moveNumber + 1);\r\n  const currentMoves = currentHistory[moveNumber];\r\n  const currentSquaresPlayed = currentMoves.slice();\r\n  if (calculateWinner(currentSquaresPlayed)) {\r\n    return currentHistory.slice(0)[0];\r\n  }\r\n  return currentSquaresPlayed;\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst Square = ({ onClick, value }) => (\r\n  <Button variant=\"secondary outline-dark\" className=\"square\" onClick={onClick}>\r\n    {value}\r\n  </Button>\r\n);\r\n\r\nSquare.propTypes = {\r\n  onClick: PropTypes.func,\r\n  value: PropTypes.string,\r\n};\r\n\r\nSquare.defaultProps = {\r\n  onClick: () => {},\r\n  value: '',\r\n};\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Container, Row } from 'react-bootstrap';\r\n\r\nimport Square from '../square';\r\n\r\nconst Board = ({ squares, onClick }) => (\r\n  <Container>\r\n    <Row>\r\n      <Square value={squares[0]} onClick={() => onClick(0)} />\r\n      <Square value={squares[1]} onClick={() => onClick(1)} />\r\n      <Square value={squares[2]} onClick={() => onClick(2)} />\r\n    </Row>\r\n    <Row>\r\n      <Square value={squares[3]} onClick={() => onClick(3)} />\r\n      <Square value={squares[4]} onClick={() => onClick(4)} />\r\n      <Square value={squares[5]} onClick={() => onClick(5)} />\r\n    </Row>\r\n    <Row>\r\n      <Square value={squares[6]} onClick={() => onClick(6)} />\r\n      <Square value={squares[7]} onClick={() => onClick(7)} />\r\n      <Square value={squares[8]} onClick={() => onClick(8)} />\r\n    </Row>\r\n  </Container>\r\n);\r\n\r\nBoard.propTypes = {\r\n  squares: PropTypes.arrayOf(PropTypes.string),\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nBoard.defaultProps = {\r\n  squares: [],\r\n  onClick: () => {},\r\n};\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport { Container, Button } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './component.css';\r\n\r\nimport Board from '../../components/board';\r\n\r\nimport { determineGameStatus } from './controller';\r\n\r\nconst PlayAgainstFriend = ({\r\n  onSelectSquare,\r\n  squares,\r\n  previousPlayerMoves,\r\n  moveNumber,\r\n  xIsNext,\r\n  history,\r\n  winner,\r\n}) => (\r\n  <Container className=\"game\">\r\n    <div className=\"player-moves\">\r\n      <div className=\"player-status\" data-qa=\"game-status\">\r\n        {determineGameStatus(winner, moveNumber, xIsNext)}\r\n      </div>\r\n      {previousPlayerMoves.map(({ buttonName, buttonClick }, index) => (\r\n        <Button\r\n          className=\"move-history\"\r\n          size=\"sm\"\r\n          variant=\"outline-dark\"\r\n          key={`${[index]}-${buttonName}`}\r\n          onClick={buttonClick}\r\n          data-qa=\"reset-to-move-history\"\r\n        >\r\n          {buttonName}\r\n        </Button>\r\n      ))}\r\n    </div>\r\n    <div className=\"game-board\">\r\n      <Board\r\n        squares={squares}\r\n        onClick={(squareIndex) => {\r\n          onSelectSquare(squareIndex, xIsNext, history, moveNumber);\r\n        }}\r\n        data-qa=\"game-board\"\r\n      />\r\n    </div>\r\n  </Container>\r\n);\r\n\r\nPlayAgainstFriend.propTypes = {\r\n  history: PropTypes.arrayOf(PropTypes.array),\r\n  moveNumber: PropTypes.number,\r\n  onSelectSquare: PropTypes.func,\r\n  previousPlayerMoves: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      buttonName: PropTypes.string,\r\n      buttonClick: PropTypes.func,\r\n    })\r\n  ),\r\n  squares: PropTypes.arrayOf(PropTypes.string),\r\n  winner: PropTypes.string,\r\n  xIsNext: PropTypes.bool,\r\n};\r\n\r\nPlayAgainstFriend.defaultProps = {\r\n  history: [],\r\n  moveNumber: 0,\r\n  onSelectSquare: () => {},\r\n  previousPlayerMoves: [\r\n    {\r\n      buttonName: 'Restart',\r\n      buttonClick: () => {},\r\n    },\r\n  ],\r\n  squares: [],\r\n  winner: '',\r\n  xIsNext: true,\r\n};\r\n\r\nexport default PlayAgainstFriend;\r\n","import { connect } from 'react-redux';\r\n\r\nimport { selectSquare, goToMove } from '../../reducers/state-of-game/actions';\r\n\r\nimport { getCurrentMovesPlayed, calculateWinner } from './controller';\r\nimport PlayAgainstFriend from './component';\r\n\r\nexport const mapStateToProps = ({\r\n  app: {\r\n    status: { history, xIsNext, moveNumber },\r\n  },\r\n}) => ({\r\n  history,\r\n  moveNumber,\r\n  xIsNext,\r\n  squares: history[moveNumber],\r\n  winner: calculateWinner(history[moveNumber]),\r\n});\r\n\r\nexport const mapDispatchToProps = (dispatch) => ({\r\n  onSelectSquare: (squareIndex, nextPlayer, history, moveNumber) => {\r\n    const currentMovesPlayed = getCurrentMovesPlayed(\r\n      history,\r\n      moveNumber,\r\n      squareIndex,\r\n      nextPlayer\r\n    );\r\n    if (!currentMovesPlayed[squareIndex]) {\r\n      currentMovesPlayed[squareIndex] = nextPlayer ? 'X' : 'O';\r\n      dispatch(selectSquare({ squareIndex, currentMovesPlayed }));\r\n    }\r\n  },\r\n  jumpTo: (step) => dispatch(goToMove(step)),\r\n});\r\n\r\nexport const mergeProps = (stateProps, dispatchProps) => ({\r\n  ...stateProps,\r\n  ...dispatchProps,\r\n  previousPlayerMoves: stateProps.history.map((_, moveId) => ({\r\n    buttonName: moveId ? `Go to move #${moveId}` : 'Restart',\r\n    buttonClick: () => dispatchProps.jumpTo(moveId),\r\n  })),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  mergeProps\r\n)(PlayAgainstFriend);\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport LandingPage from '../pages/landing-page';\r\nimport PlayAgainstFriend from '../pages/play-against-friend';\r\n\r\nimport { LANDING_PAGE, COMPUTER, PLAYER, SCORE_BOARD } from './urls';\r\n\r\nconst NavigationRoutes = () => (\r\n  <Switch>\r\n    <Route\r\n      exact\r\n      path={LANDING_PAGE}\r\n      component={LandingPage}\r\n      data-qa=\"landing-page\"\r\n    />\r\n    <Route path={COMPUTER} data-qa=\"vs-computer\" />\r\n    <Route path={PLAYER} component={PlayAgainstFriend} data-qa=\"vs-player\" />\r\n    <Route path={SCORE_BOARD} data-qa=\"score-board\" />\r\n  </Switch>\r\n);\r\n\r\nexport default NavigationRoutes;\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport './index.css';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './reducers/store';\r\nimport NavigationBar from './components/nav-bar';\r\nimport NavigationRoutes from './routes/component';\r\n\r\nconst root = document.getElementById('root');\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <NavigationBar />\r\n      <NavigationRoutes />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  root\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}