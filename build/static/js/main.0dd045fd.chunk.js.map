{"version":3,"sources":["utilities/index.js","reducers/index.js","actions/index.js","components/square/square.jsx","components/board/board.jsx","components/game/component.jsx","components/game/container.js","serviceWorker.js","index.jsx"],"names":["calculateWinner","squares","lines","i","length","a","b","c","winnerCombination","winnerName","initialState","history","Array","fill","movesAscendingOrder","xIsNext","stepNumber","TicTacToeApp","state","action","slice","current","type","step","index","Square","onClick","value","Button","variant","className","defaultProps","renderSquare","squareIndex","Board","Container","Row","Game","jumpTo","sortMoves","movesHistory","winner","moves","map","move","desc","key","size","gameStatus","reverse","GamePlay","connect","dispatch","id","goToMove","Boolean","window","location","hostname","match","store","createStore","root","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0dd045fd.chunk.js","sourcesContent":["function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return { winnerCombination: [a, b, c], winnerName: squares[a] };\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default calculateWinner;\r\n","import { SELECT_SQUARE, MOVES_ORDER, GO_TO_MOVE } from '../actions';\r\nimport calculateWinner from '../utilities';\r\n\r\nconst initialState = {\r\n  history: [\r\n    {\r\n      squares: Array(9).fill(''),\r\n    },\r\n  ],\r\n  movesAscendingOrder: true,\r\n  xIsNext: true,\r\n  stepNumber: 0,\r\n};\r\n\r\nconst TicTacToeApp = (state = initialState, action) => {\r\n  const history = state.history.slice(0, state.stepNumber + 1);\r\n  const current = history[state.stepNumber];\r\n  const squares = current.squares.slice();\r\n  switch (action.type) {\r\n    case MOVES_ORDER:\r\n      return { ...state, movesAscendingOrder: !state.movesAscendingOrder };\r\n\r\n    case GO_TO_MOVE:\r\n      return {\r\n        ...state,\r\n        history: state.history.slice(0, action.step + 1),\r\n        stepNumber: action.step,\r\n        xIsNext: !(action.step % 2),\r\n      };\r\n\r\n    case SELECT_SQUARE:\r\n      if (calculateWinner(squares) || squares[action.index]) {\r\n        return state;\r\n      }\r\n      squares[action.index] = state.xIsNext ? 'X' : 'O';\r\n      return {\r\n        ...state,\r\n        history: [\r\n          ...state.history,\r\n          {\r\n            squares,\r\n          },\r\n        ],\r\n        xIsNext: !state.xIsNext,\r\n        stepNumber: history.length,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default TicTacToeApp;\r\n","export const SELECT_SQUARE = 'SELECT_SQUARE';\r\nexport const MOVES_ORDER = 'MOVES_ORDER';\r\nexport const GO_TO_MOVE = 'GO_TO_MOVE';\r\n\r\nexport const selectSquare = (index) => ({\r\n  type: SELECT_SQUARE,\r\n  index,\r\n});\r\n\r\nexport const changeMovesOrder = () => ({\r\n  type: MOVES_ORDER,\r\n});\r\n\r\nexport const goToMove = (step) => ({\r\n  type: GO_TO_MOVE,\r\n  step,\r\n});\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst Square = ({ onClick, value }) => (\r\n  <Button variant=\"secondary outline-dark\" className=\"square\" onClick={onClick}>\r\n    {value}\r\n  </Button>\r\n);\r\n\r\nSquare.propTypes = {\r\n  onClick: PropTypes.func,\r\n  value: PropTypes.string,\r\n};\r\n\r\nSquare.defaultProps = {\r\n  onClick: () => {},\r\n  value: 'X',\r\n};\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Container, Row } from 'react-bootstrap';\r\n\r\nimport Square from '../square';\r\n\r\nconst renderSquare = (squareIndex, squares, onClick) => (\r\n  <Square value={squares[squareIndex]} onClick={() => onClick(squareIndex)} />\r\n);\r\n\r\nconst Board = ({ squares, onClick }) => (\r\n  <Container>\r\n    <Row>\r\n      {renderSquare(0, squares, onClick)}\r\n      {renderSquare(1, squares, onClick)}\r\n      {renderSquare(2, squares, onClick)}\r\n    </Row>\r\n    <Row>\r\n      {renderSquare(3, squares, onClick)}\r\n      {renderSquare(4, squares, onClick)}\r\n      {renderSquare(5, squares, onClick)}\r\n    </Row>\r\n    <Row>\r\n      {renderSquare(6, squares, onClick)}\r\n      {renderSquare(7, squares, onClick)}\r\n      {renderSquare(8, squares, onClick)}\r\n    </Row>\r\n  </Container>\r\n);\r\n\r\nBoard.propTypes = {\r\n  squares: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nBoard.defaultProps = {\r\n  onClick: () => {},\r\n};\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport { Button, Container } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Board from '../board';\r\nimport calculateWinner from '../../utilities';\r\n\r\nconst Game = ({\r\n  history,\r\n  stepNumber,\r\n  jumpTo,\r\n  sortMoves,\r\n  xIsNext,\r\n  movesAscendingOrder,\r\n  onClick,\r\n}) => {\r\n  const movesHistory = history;\r\n  const current = movesHistory[stepNumber];\r\n  const winner = calculateWinner(current.squares);\r\n  const moves = movesHistory.map((step, move) => {\r\n    const desc = move ? `Go to move #${move}` : 'Restart';\r\n\r\n    return (\r\n      <span key={[move]}>\r\n        <Button size=\"sm\" variant=\"outline-dark\" onClick={() => jumpTo(move)}>\r\n          {desc}\r\n        </Button>\r\n      </span>\r\n    );\r\n  });\r\n\r\n  const calculateWinnerStatus = () => {\r\n    if (winner) {\r\n      return <p>{winner.winnerName} is the Winner!</p>;\r\n    }\r\n    if (!winner && stepNumber === 9) {\r\n      return <p>Its a Draw!</p>;\r\n    }\r\n    return <p>Next player is {xIsNext ? 'X' : 'O'}</p>;\r\n  };\r\n  const gameStatus = calculateWinnerStatus(winner);\r\n  return (\r\n    <Container className=\"game\">\r\n      <div className=\"gameBoard\">\r\n        <Board\r\n          squares={current.squares}\r\n          onClick={(squareIndex) => onClick(squareIndex)}\r\n          winnerCombination={winner ? winner.winnerCombination : []}\r\n        />\r\n      </div>\r\n      <div className=\"gameInfo\">\r\n        <div className=\"playerStatus\">{gameStatus}</div>\r\n      </div>\r\n      <span className=\"playerMoves\">\r\n        {movesAscendingOrder ? moves : moves.reverse()}\r\n      </span>\r\n      <Button\r\n        size=\"sm\"\r\n        variant=\"dark\"\r\n        onClick={() => sortMoves()}\r\n        className=\"sortButton\"\r\n      >\r\n        Change order\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\n\r\nGame.propTypes = {\r\n  history: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      squares: PropTypes.arrayOf(PropTypes.string),\r\n    })\r\n  ),\r\n  jumpTo: PropTypes.func,\r\n  movesAscendingOrder: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  sortMoves: PropTypes.func,\r\n  stepNumber: PropTypes.number,\r\n  xIsNext: PropTypes.bool,\r\n};\r\n\r\nGame.defaultProps = {\r\n  history: [\r\n    {\r\n      squares: [''],\r\n    },\r\n  ],\r\n  jumpTo: () => {},\r\n  movesAscendingOrder: true,\r\n  onClick: () => {},\r\n  sortMoves: () => {},\r\n  stepNumber: 0,\r\n  xIsNext: true,\r\n};\r\n\r\nexport default Game;\r\n","import { connect } from 'react-redux';\r\n\r\nimport { selectSquare, goToMove, changeMovesOrder } from '../../actions';\r\n\r\nimport Game from './component';\r\n\r\nconst mapStateToProps = (state) => state;\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onClick: (id) => dispatch(selectSquare(id)),\r\n  jumpTo: (step) => dispatch(goToMove(step)),\r\n  sortMoves: () => dispatch(changeMovesOrder()),\r\n});\r\n\r\nconst GamePlay = connect(mapStateToProps, mapDispatchToProps)(Game);\r\n\r\nexport default GamePlay;\r\n","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    || window.location.hostname === '[::1]'\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              console.log('Content is cached for offline use.');\r\n\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './index.css';\r\nimport TicTacToeApp from './reducers';\r\nimport GamePlay from './components/game';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = createStore(TicTacToeApp);\r\nconst root = document.getElementById('root');\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <GamePlay />\r\n  </Provider>,\r\n  root\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}