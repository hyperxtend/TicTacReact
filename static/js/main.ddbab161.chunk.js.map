{"version":3,"sources":["serviceWorker.js","reducers/state-of-game/actions.js","reducers/state-of-game/reducer.js","reducers/app.js","reducers/index.js","reducers/store.js","services/local-storage/index.js","components/nav-bar/component.jsx","routes/urls.js","pages/landing-page/menu-selection/component.jsx","pages/landing-page/component.jsx","utils/calculate-winner/index.js","components/square/component.jsx","components/board/component.jsx","components/move-history/component.jsx","components/score-banner/component.jsx","components/page-header/component.jsx","pages/play-against-computer/component.jsx","pages/play-against-computer/controller.js","pages/play-against-computer/container.js","pages/play-against-friend/component.jsx","pages/play-against-friend/controller.js","pages/play-against-friend/container.js","pages/score-board/controller.js","pages/score-board/component.jsx","pages/score-board/container.js","routes/component.jsx","index.jsx"],"names":["Boolean","window","location","hostname","match","selectSquare","action","computerMove","goToMove","setXScore","setOScore","setDrawScore","gamesPlayed","resetState","initialState","history","Array","fill","xIsNext","winner","moveNumber","playerXScore","playerOScore","drawScore","combineReducers","status","state","type","slice","payload","currentMovesPlayed","length","app","store","createStore","reducers","registeredState","localStorage","getItem","JSON","parse","error","getState","composeWithDevTools","subscribe","currentState","stringify","setItem","saveState","NavigationBar","Navbar","className","to","MenuSelection","Container","data-qa","Button","variant","size","LandingPage","calculateWinner","currentlyPlayedMoves","possibleWinningCombinations","winningCombinationIndex","a","b","c","Square","onClick","value","defaultProps","Board","squares","Row","MoveHistory","previousPlayerMoves","map","index","buttonName","buttonClick","key","ScoreBanner","scoreForPlayerX","scoreForPlayerO","scoreForDraw","Table","PageHeader","pageTitle","PlayAgainstComputer","movesForPlayers","determineGameStatus","squareIndex","connect","dispatch","currentSquaresPlayed","randomIndex","Math","floor","random","nextAvailableIndex","indexOf","getPlayersMoves","jumpTo","step","currentScore","stateProps","dispatchProps","_","moveId","PlayAgainstFriend","onSelectSquare","nextPlayer","getCurrentMovesPlayed","calculateWinningAverage","currentScoreOfPlayer","averageWinningRate","Number","isNaN","toFixed","ScoreBoard","resetGameState","Col","actionPayload","NavigationRoutes","exact","path","component","root","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"qXACoBA,QACW,cAA7BC,OAAOC,SAASC,UACe,UAA7BF,OAAOC,SAASC,UAChBF,OAAOC,SAASC,SAASC,MACvB,2D,oDCMOC,EAAeC,IATC,iBAUhBC,EAAeD,IATC,iBAUhBE,EAAWF,IATE,cAUbG,EAAYH,IATE,eAUdI,EAAYJ,IATE,eAUdK,EAAeL,IATE,kBAUjBM,EAAcN,IATC,gBAUfO,EAAaP,IATC,eCEdQ,EAAe,CAC1BC,QAAS,CAACC,MAAM,GAAGC,KAAK,KACxBC,SAAS,EACTC,OAAQ,GACRC,WAAY,EACZC,aAAc,EACdC,aAAc,EACdC,UAAW,EACXX,YAAa,GCfAY,4BAAgB,CAAEC,ODkBlB,WAAwC,IAAvCC,EAAsC,uDAA9BZ,EAAcR,EAAgB,uDAAP,GAC7C,OAAQA,EAAOqB,MACb,IDpBsB,aCqBpB,OAAO,2BACFD,GADL,IAEEX,QAASW,EAAMX,QAAQa,MAAM,EAAGtB,EAAOuB,QAAU,GACjDT,WAAYd,EAAOuB,QACnBX,UAAWZ,EAAOuB,QAAU,KAEhC,ID7ByB,gBC8BvB,OAAO,2BACFH,GADL,IAEEX,QAAQ,GAAD,mBAAMW,EAAMX,SAAZ,CAAqBT,EAAOuB,QAAQC,qBAC3CZ,SAAUQ,EAAMR,QAChBE,WAAYM,EAAMX,QAAQgB,SAE9B,IDnCyB,gBCoCvB,OAAO,2BACFL,GADL,IAEEX,QAAQ,GAAD,mBAAMW,EAAMX,SAAZ,CAAqBT,EAAOuB,QAAQC,qBAC3CZ,QAASQ,EAAMR,QACfE,WAAYM,EAAMX,QAAQgB,SAE9B,IDxCuB,cCyCrB,OAAO,2BACFL,GADL,IAEEP,OAAQ,IACRE,aAAcK,EAAML,aAAe,IAEvC,ID7CuB,cC8CrB,OAAO,2BACFK,GADL,IAEEP,OAAQ,IACRG,aAAcI,EAAMJ,aAAe,IAEvC,IDlD0B,iBCmDxB,OAAO,2BACFI,GADL,IAEEP,OAAQ,GACRI,UAAWG,EAAMH,UAAY,IAEjC,IDvDwB,eCwDtB,OAAO,2BACFG,GADL,IAEEX,QAAS,CAACC,MAAM,GAAGC,KAAK,KACxBC,SAAS,EACTC,OAAQ,GACRC,WAAY,EACZC,aAAcK,EAAML,aACpBC,aAAcI,EAAMJ,aACpBV,YAAac,EAAMd,YAAc,IAErC,IDjEuB,cCkErB,OAAOE,EACT,QACE,OAAOY,MEzEEF,4BAAgB,CAAEQ,QCG3BC,EAAQC,sBAAYC,ECPF,WACtB,IACE,IAAMC,EAAkBC,aAAaC,QAAQ,SAC7C,GAAwB,OAApBF,EACF,OAEF,OAAOG,KAAKC,MAAMJ,GAClB,MAAOK,GACP,QDDgCC,GAAYC,iCAEhDV,EAAMW,WAAU,YCGS,SAACC,GACxB,IACE,IAAMT,EAAkBG,KAAKO,UAAUD,GACvCR,aAAaU,QAAQ,QAASX,GAC9B,MAAOK,GACP,OAAOA,GDPTO,CAAU,CACRhB,IAAKC,EAAMS,WAAWV,SAIXC,Q,QEUAgB,G,MAjBO,kBACpB,kBAACC,EAAA,EAAD,CAAQC,UAAU,kBAChB,kBAAC,IAAD,CAASA,UAAU,YAAYC,GCVP,KDUxB,eAGA,kBAAC,IAAD,CAASD,UAAU,WAAWC,GCZV,aDYpB,eAGA,kBAAC,IAAD,CAASD,UAAU,WAAWC,GCdZ,WDclB,aAGA,kBAAC,IAAD,CAASD,UAAU,WAAWC,GChBP,eDgBvB,kB,+BEUWC,EAvBO,kBACpB,kBAACC,EAAA,EAAD,CAAWH,UAAU,uBACnB,wBAAIA,UAAU,wBAAwBI,UAAQ,yBAA9C,kBAGA,kBAAC,IAAD,CAAMH,GDVc,aCWlB,kBAACI,EAAA,EAAD,CAAQC,QAAQ,OAAOC,KAAK,KAAKP,UAAU,oBAA3C,gBAIF,kBAAC,IAAD,CAAMC,GDdY,WCehB,kBAACI,EAAA,EAAD,CAAQC,QAAQ,OAAOC,KAAK,KAAKP,UAAU,oBAA3C,cAIF,kBAAC,IAAD,CAAMC,GDlBiB,eCmBrB,kBAACI,EAAA,EAAD,CAAQC,QAAQ,OAAOC,KAAK,KAAKP,UAAU,oBAA3C,kBCCSQ,EAhBK,kBAClB,kBAACL,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAWH,UAAU,oBACnB,wBAAII,UAAQ,4BAAZ,uJAKA,wBAAIA,UAAQ,2BAAZ,wCAIF,kBAAC,EAAD,Q,QCaWK,EAhCS,SAACC,GAavB,IAZA,IAAMC,EAA8B,CAClC,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAKHC,EAA0B,EAC9BA,EAA0BD,EAA4B/B,OACtDgC,GAA2B,EAC3B,CAAC,IAAD,cACkBD,EAA4BC,GAD9C,GACOC,EADP,KACUC,EADV,KACaC,EADb,KAIA,GACEL,EAAqBG,IACrBH,EAAqBG,KAAOH,EAAqBI,IACjDJ,EAAqBG,KAAOH,EAAqBK,GAEjD,OAAOL,EAAqBG,K,QCpB5BG,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,MAAZ,OACb,kBAACb,EAAA,EAAD,CAAQC,QAAQ,yBAAyBN,UAAU,SAASiB,QAASA,GAClEC,KASLF,EAAOG,aAAe,CACpBF,QAAS,aACTC,MAAO,IAGMF,QChBTI,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASJ,EAAZ,EAAYA,QAAZ,OACZ,kBAACd,EAAA,EAAD,KACE,kBAACmB,EAAA,EAAD,KACE,kBAAC,EAAD,CAAQJ,MAAOG,EAAQ,GAAIJ,QAAS,kBAAMA,EAAQ,MAClD,kBAAC,EAAD,CAAQC,MAAOG,EAAQ,GAAIJ,QAAS,kBAAMA,EAAQ,MAClD,kBAAC,EAAD,CAAQC,MAAOG,EAAQ,GAAIJ,QAAS,kBAAMA,EAAQ,OAEpD,kBAACK,EAAA,EAAD,KACE,kBAAC,EAAD,CAAQJ,MAAOG,EAAQ,GAAIJ,QAAS,kBAAMA,EAAQ,MAClD,kBAAC,EAAD,CAAQC,MAAOG,EAAQ,GAAIJ,QAAS,kBAAMA,EAAQ,MAClD,kBAAC,EAAD,CAAQC,MAAOG,EAAQ,GAAIJ,QAAS,kBAAMA,EAAQ,OAEpD,kBAACK,EAAA,EAAD,KACE,kBAAC,EAAD,CAAQJ,MAAOG,EAAQ,GAAIJ,QAAS,kBAAMA,EAAQ,MAClD,kBAAC,EAAD,CAAQC,MAAOG,EAAQ,GAAIJ,QAAS,kBAAMA,EAAQ,MAClD,kBAAC,EAAD,CAAQC,MAAOG,EAAQ,GAAIJ,QAAS,kBAAMA,EAAQ,SAUxDG,EAAMD,aAAe,CACnBE,QAAS,GACTJ,QAAS,cAGIG,QC9BTG,G,MAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,oBAAH,OAClB,yBAAKxB,UAAU,gBACb,0BAAMA,UAAU,kBAAhB,cACCwB,EAAoBC,KAAI,WAA8BC,GAA9B,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,YAAf,OACvB,kBAACvB,EAAA,EAAD,CACEL,UAAU,eACVO,KAAK,KACLD,QAAQ,eACRuB,IAAG,UAAK,CAACH,GAAN,YAAgBC,GACnBV,QAASW,EACTxB,UAAQ,yBAEPuB,SAeTJ,EAAYJ,aAAe,CACzBK,oBAAqB,CACnB,CACEG,WAAY,UACZC,YAAa,gBAKJL,Q,QCpCTO,G,MAAc,SAAC,GAAD,IAClB9D,EADkB,EAClBA,OACAC,EAFkB,EAElBA,WACAC,EAHkB,EAGlBA,aACAC,EAJkB,EAIlBA,aACAC,EALkB,EAKlBA,UACA2D,EANkB,EAMlBA,gBACAC,EAPkB,EAOlBA,gBACAC,EARkB,EAQlBA,aARkB,OAUlB,kBAACC,EAAA,EAAD,CAAOlC,UAAU,gBACf,+BACE,4BACE,wBAAIA,UAAU,qBAAd,kBACA,wBAAIA,UAAU,oBAAoBI,UAAQ,qBAA1C,UAGA,wBAAIJ,UAAU,qBAAd,mBAEF,4BACE,wBAAIA,UAAU,iBACZ,8BAAO+B,EAAgB7D,EAAcF,KAEvC,wBAAIgC,UAAU,iBACZ,8BAAOiC,EAAa7D,EAAWJ,EAAQC,KAEzC,wBAAI+B,UAAU,iBACZ,8BAAOgC,EAAgB7D,EAAcH,UAkB/C8D,EAAYX,aAAe,CACzBnD,OAAQ,GACRC,WAAY,EACZC,aAAc,EACdC,aAAc,EACdC,UAAW,EACX2D,gBAAiB,aACjBC,gBAAiB,aACjBC,aAAc,cAGDH,QCzDTK,G,MAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACjB,wBAAIpC,UAAU,aAAaI,UAAQ,cAChCgC,KAQLD,EAAWhB,aAAe,CACxBiB,UAAW,IAGED,QCRTE,EAAsB,SAAC,GAAD,IAC1BrE,EAD0B,EAC1BA,OACAC,EAF0B,EAE1BA,WACAC,EAH0B,EAG1BA,aACAC,EAJ0B,EAI1BA,aACAC,EAL0B,EAK1BA,UACA2D,EAN0B,EAM1BA,gBACAC,EAP0B,EAO1BA,gBACAC,EAR0B,EAQ1BA,aACAT,EAT0B,EAS1BA,oBACAc,EAV0B,EAU1BA,gBACAjB,EAX0B,EAW1BA,QACAtD,EAZ0B,EAY1BA,QACAH,EAb0B,EAa1BA,QAb0B,OAe1B,kBAACuC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAYiC,UAAU,6BACtB,kBAACjC,EAAA,EAAD,CAAWH,UAAU,QACnB,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBAAgBI,UAAQ,eC9BZ,SAACpC,EAAQC,EAAYF,GACtD,OAAIC,EACI,GAAN,OAAUA,EAAV,oBAEGA,GAAUC,GAAc,EACpB,cAGH,kBAAN,OAAyBF,EAAU,IAAM,KDuBhCwE,CAAoBvE,EAAQC,EAAYF,IAE3C,kBAAC,EAAD,CACEsD,QAASA,EACTJ,QAAS,SAACuB,GACRF,EAAgBE,EAAazE,EAASH,EAASK,IAEjDmC,UAAQ,gBAGZ,kBAAC,EAAD,CAAaoB,oBAAqBA,KAEpC,kBAAC,EAAD,CACExD,OAAQA,EACRC,WAAYA,EACZC,aAAcA,EACdC,aAAcA,EACdC,UAAWA,EACX2D,gBAAiBA,EACjBC,gBAAiBA,EACjBC,aAAcA,MA0BpBI,EAAoBlB,aAAe,CACjCvD,QAAS,GACTI,OAAQ,GACRsE,gBAAiB,aACjBjB,QAAS,GACTtD,SAAS,EACTE,WAAY,EACZuD,oBAAqB,CACnB,CACEG,WAAY,UACZC,YAAa,eAGjB1D,aAAc,EACdC,aAAc,EACdC,UAAW,EACX2D,gBAAiB,aACjBC,gBAAiB,aACjBC,aAAc,cAGDI,QElBAI,eAjEgB,SAAC,GAAD,QAC7B5D,IACEP,OACEV,EAHyB,EAGzBA,QACAG,EAJyB,EAIzBA,QACAE,EALyB,EAKzBA,WALyB,MAWxB,CACLL,UACAK,aACAF,UACAG,aAf6B,EAMzBA,aAUJC,aAhB6B,EAOzBA,aAUJC,UAjB6B,EAQzBA,UAUJiD,QAASzD,EAAQK,GACjBD,OAAQyC,EAAgB7C,EAAQK,QAGA,SAACyE,GAAD,MAAe,CAC/CJ,gBAAiB,SAACE,EAAazE,EAASH,EAASK,GAC/C,IAAMU,ED5BqB,SAACf,EAASK,EAAYuE,EAAazE,GAChE,IAEM4E,EAFiB/E,EAAQa,MAAM,EAAGR,EAAa,GACjBA,GACMQ,QAE1C,IAAKkE,EAAqBH,KACxBG,EAAqBH,GAAe,KAEpB,IAAZzE,GAAmC,IAAfE,GAAkB,CACxC,IAAM2E,EAAcC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC9BC,EAAqBL,EAAqBM,QAAQ,IAExD,GAA0C,MAAtCN,EAAqBC,GAEvB,OADAD,EAAqBK,GAAsB,IACpCL,EAGT,GAA0C,MAAtCA,EAAqBC,GAEvB,OADAD,EAAqBK,GAAsB,IACpCL,EAETA,EAAqBC,GAAe,IAGxC,OAAOD,ECIsBO,CACzBtF,EACAK,EACAuE,EACAzE,GAEF2E,EAAStF,EAAa,CAAEoF,cAAa7D,yBAEvCwE,OAAQ,SAACC,GAAD,OAAUV,EAASrF,EAAS+F,KACpCrB,gBAAiB,SAACsB,EAAcrF,GAK9B,MAJe,MAAXA,IACF0E,EAASpF,EAAU+F,IACnBX,EAASjF,EAAY4F,KAEhBA,GAETrB,gBAAiB,SAACqB,EAAcrF,GAK9B,MAJe,MAAXA,IACF0E,EAASnF,EAAU8F,IACnBX,EAASjF,EAAY4F,KAEhBA,GAETpB,aAAc,SAACoB,EAAcrF,EAAQC,GAKnC,MAJe,KAAXD,GAAiBC,GAAc,IACjCyE,EAASlF,EAAa6F,IACtBX,EAASjF,EAAY4F,KAEhBA,OAIe,SAACC,EAAYC,GAAb,mBAAC,2BACtBD,GACAC,GAFqB,IAGxB/B,oBAAqB8B,EAAW1F,QAAQ6D,KAAI,SAAC+B,EAAGC,GAAJ,MAAgB,CAC1D9B,WAAY8B,EAAM,gBAAYA,GAAW,QACzC7B,YAAa,kBAAM2B,EAAcJ,OAAOM,YAI7BhB,CAIbJ,GCzEIqB,EAAoB,SAAC,GAAD,IACxB1F,EADwB,EACxBA,OACAC,EAFwB,EAExBA,WACAC,EAHwB,EAGxBA,aACAC,EAJwB,EAIxBA,aACAC,EALwB,EAKxBA,UACA2D,EANwB,EAMxBA,gBACAC,EAPwB,EAOxBA,gBACAC,EARwB,EAQxBA,aACAT,EATwB,EASxBA,oBACAmC,EAVwB,EAUxBA,eACAtC,EAXwB,EAWxBA,QACAtD,EAZwB,EAYxBA,QACAH,EAbwB,EAaxBA,QAbwB,OAexB,kBAACuC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAYiC,UAAU,2BACtB,kBAACjC,EAAA,EAAD,CAAWH,UAAU,QACnB,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBAAgBI,UAAQ,eC9BZ,SAACpC,EAAQC,EAAYF,GACtD,OAAIC,EACI,GAAN,OAAUA,EAAV,mBAEGA,GAAyB,IAAfC,EAGT,kBAAN,OAAyBF,EAAU,IAAM,KAFhC,cD0BAwE,CAAoBvE,EAAQC,EAAYF,IAE3C,kBAAC,EAAD,CACEsD,QAASA,EACTJ,QAAS,SAACuB,GACRmB,EAAenB,EAAazE,EAASH,EAASK,IAEhDmC,UAAQ,gBAGZ,kBAAC,EAAD,CAAaoB,oBAAqBA,KAEpC,kBAAC,EAAD,CACExD,OAAQA,EACRC,WAAYA,EACZC,aAAcA,EACdC,aAAcA,EACdC,UAAWA,EACX2D,gBAAiBA,EACjBC,gBAAiBA,EACjBC,aAAcA,MA0BpByB,EAAkBvC,aAAe,CAC/BvD,QAAS,GACT+F,eAAgB,aAChB3F,OAAQ,GACRqD,QAAS,GACTtD,SAAS,EACTE,WAAY,EACZuD,oBAAqB,CACnB,CACEG,WAAY,UACZC,YAAa,eAGjB1D,aAAc,EACdC,aAAc,EACdC,UAAW,EACX2D,gBAAiB,aACjBC,gBAAiB,aACjBC,aAAc,cAGDyB,QElBAjB,eAjEgB,SAAC,GAAD,QAC7B5D,IACEP,OACEV,EAHyB,EAGzBA,QACAG,EAJyB,EAIzBA,QACAE,EALyB,EAKzBA,WALyB,MAWxB,CACLL,UACAK,aACAF,UACAG,aAf6B,EAMzBA,aAUJC,aAhB6B,EAOzBA,aAUJC,UAjB6B,EAQzBA,UAUJiD,QAASzD,EAAQK,GACjBD,OAAQyC,EAAgB7C,EAAQK,QAGA,SAACyE,GAAD,MAAe,CAC/CiB,eAAgB,SAACnB,EAAaoB,EAAYhG,EAASK,GACjD,IAAMU,ED7B2B,SACnCf,EACAK,EACAuE,EACAzE,GAEA,IAEM4E,EAFiB/E,EAAQa,MAAM,EAAGR,EAAa,GACjBA,GACMQ,QAM1C,MAJ0C,KAAtCkE,EAAqBH,KACvBG,EAAqBH,GAAezE,EAAU,IAAM,KAG/C4E,ECesBkB,CACzBjG,EACAK,EACAuE,EACAoB,GAEFlB,EAASxF,EAAa,CAAEsF,cAAa7D,yBAEvCwE,OAAQ,SAACC,GAAD,OAAUV,EAASrF,EAAS+F,KACpCrB,gBAAiB,SAACsB,EAAcrF,GAK9B,MAJe,MAAXA,IACF0E,EAASpF,EAAU+F,IACnBX,EAASjF,EAAY4F,KAEhBA,GAETrB,gBAAiB,SAACqB,EAAcrF,GAK9B,MAJe,MAAXA,IACF0E,EAASnF,EAAU8F,IACnBX,EAASjF,EAAY4F,KAEhBA,GAETpB,aAAc,SAACoB,EAAcrF,EAAQC,GAKnC,MAJe,KAAXD,GAAgC,IAAfC,IACnByE,EAASlF,EAAa6F,IACtBX,EAASjF,EAAY4F,KAEhBA,OAIe,SAACC,EAAYC,GAAb,mBAAC,2BACtBD,GACAC,GAFqB,IAGxB/B,oBAAqB8B,EAAW1F,QAAQ6D,KAAI,SAAC+B,EAAGC,GAAJ,MAAgB,CAC1D9B,WAAY8B,EAAM,gBAAYA,GAAW,QACzC7B,YAAa,kBAAM2B,EAAcJ,OAAOM,YAI7BhB,CAIbiB,G,SC5EaI,I,MARiB,SAACrG,EAAasG,GAC5C,IAAMC,EAAsBD,EAAuBtG,EAAxB,IAC3B,OAAyC,IAArCwG,OAAOC,MAAMF,GACR,EAEFA,EAAmBG,QAAQ,KCK9BC,GAAa,SAAC,GAAD,IACjBlG,EADiB,EACjBA,aACAC,EAFiB,EAEjBA,aACAC,EAHiB,EAGjBA,UACAX,EAJiB,EAIjBA,YACA4G,EALiB,EAKjBA,eALiB,OAOjB,yBAAKjE,UAAQ,eACX,kBAAC,EAAD,CAAYgC,UAAU,gBACtB,kBAACjC,EAAA,EAAD,CAAWH,UAAU,eACnB,yBAAKA,UAAU,aACb,kBAACsE,GAAA,EAAD,CAAKtE,UAAU,cAAf,YACA,kBAACsE,GAAA,EAAD,CAAKtE,UAAU,cAAf,aAEF,yBAAKA,UAAU,aACb,kBAACsE,GAAA,EAAD,CAAKtE,UAAU,kBAAf,QACA,kBAACsE,GAAA,EAAD,CAAKtE,UAAU,kBAAf,SACA,kBAACsE,GAAA,EAAD,CAAKtE,UAAU,kBAAf,SAEF,yBAAKA,UAAU,aACb,kBAACsE,GAAA,EAAD,CAAKtE,UAAU,SAASI,UAAQ,kBAC7BlC,GAEH,kBAACoG,GAAA,EAAD,CAAKtE,UAAU,SAASI,UAAQ,kBAC7BhC,GAEH,kBAACkG,GAAA,EAAD,CAAKtE,UAAU,SAASI,UAAQ,kBAC7BjC,IAGL,yBAAK6B,UAAU,aACb,kBAACsE,GAAA,EAAD,CAAKtE,UAAU,kBAAf,gBACA,kBAACsE,GAAA,EAAD,CAAKtE,UAAU,kBAAf,iBAEF,yBAAKA,UAAU,aACb,kBAACsE,GAAA,EAAD,CAAKtE,UAAU,SAASI,UAAQ,yBAC7B0D,GAAwBrG,EAAaS,GADxC,KAIA,kBAACoG,GAAA,EAAD,CAAKtE,UAAU,SAASI,UAAQ,yBAC7B0D,GAAwBrG,EAAaU,GADxC,MAIF,kBAACkC,EAAA,EAAD,CACEC,QAAQ,UACRC,KAAK,KACLP,UAAU,cACVI,UAAQ,cACRa,QAAS,SAACsD,GAAD,OAAmBF,EAAeE,KAL7C,kBAqBNH,GAAWjD,aAAe,CACxBjD,aAAc,EACdC,aAAc,EACdC,UAAW,EACXX,YAAa,EACb4G,eAAgB,cAGHD,UC/CA3B,gBA5BgB,SAAC,GAAD,QAC7B5D,IACEP,OACEV,EAHyB,EAGzBA,QACAG,EAJyB,EAIzBA,QACAE,EALyB,EAKzBA,WALyB,MAYxB,CACLL,UACAK,aACAF,UACAG,aAhB6B,EAMzBA,aAWJC,aAjB6B,EAOzBA,aAWJC,UAlB6B,EAQzBA,UAWJX,YAnB6B,EASzBA,YAWJ4D,QAASzD,EAAQK,GACjBD,OAAQyC,EAAgB7C,EAAQK,QAGA,SAACyE,GAAD,MAAe,CAC/C2B,eAAgB,SAACE,GAAD,OAAmB7B,EAAShF,EAAW6G,QAG1C9B,CAA6C2B,ICP7CI,GAlBU,kBACvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KlBdsB,IkBetBC,UAAWnE,EACXJ,UAAQ,iBAEV,kBAAC,IAAD,CACEsE,KlBlBkB,YkBmBlBC,UAAWtC,EACXjC,UAAQ,gBAEV,kBAAC,IAAD,CAAOsE,KlBrBW,UkBqBGC,UAAWjB,EAAmBtD,UAAQ,cAC3D,kBAAC,IAAD,CAAOsE,KlBrBgB,ckBqBGC,UAAWP,GAAYhE,UAAQ,kBCXvDwE,GAAOC,SAASC,eAAe,QAErCC,iBACE,kBAAC,IAAD,CAAUjG,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,GAAD,QAGJ8F,I3B6EI,kBAAmBI,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAChG,GACNiG,QAAQjG,MAAMA,EAAMkG,c","file":"static/js/main.ddbab161.chunk.js","sourcesContent":["/* eslint-disable no-console */\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    window.location.hostname === '[::1]' ||\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      const registry = registration;\r\n      registry.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              console.log('Content is cached for offline use.');\r\n\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import action from 'payload-action-creator';\r\n\r\nexport const SELECT_SQUARE = 'SELECT_SQUARE';\r\nexport const COMPUTER_MOVE = 'COMPUTER_MOVE';\r\nexport const GO_TO_MOVE = 'GO_TO_MOVE';\r\nexport const SET_X_SCORE = 'SET_X_SCORE';\r\nexport const SET_O_SCORE = 'SET_O_SCORE';\r\nexport const SET_DRAW_SCORE = 'SET_DRAW_SCORE';\r\nexport const GAMES_PLAYED = 'GAMES_PLAYED';\r\nexport const RESET_STATE = 'RESET_STATE';\r\n\r\nexport const selectSquare = action(SELECT_SQUARE);\r\nexport const computerMove = action(COMPUTER_MOVE);\r\nexport const goToMove = action(GO_TO_MOVE);\r\nexport const setXScore = action(SET_X_SCORE);\r\nexport const setOScore = action(SET_O_SCORE);\r\nexport const setDrawScore = action(SET_DRAW_SCORE);\r\nexport const gamesPlayed = action(GAMES_PLAYED);\r\nexport const resetState = action(RESET_STATE);\r\n","import {\r\n  SELECT_SQUARE,\r\n  GO_TO_MOVE,\r\n  COMPUTER_MOVE,\r\n  SET_X_SCORE,\r\n  SET_O_SCORE,\r\n  SET_DRAW_SCORE,\r\n  GAMES_PLAYED,\r\n  RESET_STATE,\r\n} from './actions';\r\n\r\nexport const initialState = {\r\n  history: [Array(9).fill('')],\r\n  xIsNext: true,\r\n  winner: '',\r\n  moveNumber: 0,\r\n  playerXScore: 0,\r\n  playerOScore: 0,\r\n  drawScore: 0,\r\n  gamesPlayed: 0,\r\n};\r\n\r\nexport default (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case GO_TO_MOVE:\r\n      return {\r\n        ...state,\r\n        history: state.history.slice(0, action.payload + 1),\r\n        moveNumber: action.payload,\r\n        xIsNext: !(action.payload % 2),\r\n      };\r\n    case SELECT_SQUARE:\r\n      return {\r\n        ...state,\r\n        history: [...state.history, action.payload.currentMovesPlayed],\r\n        xIsNext: !state.xIsNext,\r\n        moveNumber: state.history.length,\r\n      };\r\n    case COMPUTER_MOVE:\r\n      return {\r\n        ...state,\r\n        history: [...state.history, action.payload.currentMovesPlayed],\r\n        xIsNext: state.xIsNext,\r\n        moveNumber: state.history.length,\r\n      };\r\n    case SET_X_SCORE:\r\n      return {\r\n        ...state,\r\n        winner: 'X',\r\n        playerXScore: state.playerXScore + 1,\r\n      };\r\n    case SET_O_SCORE:\r\n      return {\r\n        ...state,\r\n        winner: 'O',\r\n        playerOScore: state.playerOScore + 1,\r\n      };\r\n    case SET_DRAW_SCORE:\r\n      return {\r\n        ...state,\r\n        winner: '',\r\n        drawScore: state.drawScore + 1,\r\n      };\r\n    case GAMES_PLAYED:\r\n      return {\r\n        ...state,\r\n        history: [Array(9).fill('')],\r\n        xIsNext: true,\r\n        winner: '',\r\n        moveNumber: 0,\r\n        playerXScore: state.playerXScore,\r\n        playerOScore: state.playerOScore,\r\n        gamesPlayed: state.gamesPlayed + 1,\r\n      };\r\n    case RESET_STATE:\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\n\r\nimport status from './state-of-game';\r\n\r\nexport default combineReducers({ status });\r\n","import { combineReducers } from 'redux';\r\n\r\nimport app from './app';\r\n\r\nexport default combineReducers({ app });\r\n","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport { getState, saveState } from '../services/local-storage';\r\n\r\nimport reducers from './index';\r\n\r\nconst store = createStore(reducers, getState(), composeWithDevTools());\r\n\r\nstore.subscribe(() => {\r\n  saveState({\r\n    app: store.getState().app,\r\n  });\r\n});\r\n\r\nexport default store;\r\n","export const getState = () => {\r\n  try {\r\n    const registeredState = localStorage.getItem('state');\r\n    if (registeredState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(registeredState);\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (currentState) => {\r\n  try {\r\n    const registeredState = JSON.stringify(currentState);\r\n    localStorage.setItem('state', registeredState);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n  return undefined;\r\n};\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nimport './component.css';\r\n\r\nimport { LANDING_PAGE, COMPUTER, FRIEND, SCORE_BOARD } from '../../routes/urls';\r\n\r\nconst NavigationBar = () => (\r\n  <Navbar className=\"navigation-bar\">\r\n    <NavLink className=\"home-link\" to={LANDING_PAGE}>\r\n      Tic-Tac-Toe\r\n    </NavLink>\r\n    <NavLink className=\"nav-link\" to={COMPUTER}>\r\n      VS Computer\r\n    </NavLink>\r\n    <NavLink className=\"nav-link\" to={FRIEND}>\r\n      VS Friend\r\n    </NavLink>\r\n    <NavLink className=\"nav-link\" to={SCORE_BOARD}>\r\n      Score Board\r\n    </NavLink>\r\n  </Navbar>\r\n);\r\n\r\nexport default NavigationBar;\r\n","export const LANDING_PAGE = '/';\r\nexport const COMPUTER = '/Computer';\r\nexport const FRIEND = '/Friend';\r\nexport const SCORE_BOARD = '/ScoreBoard';\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container } from 'react-bootstrap';\r\n\r\nimport { COMPUTER, FRIEND, SCORE_BOARD } from '../../../routes/urls';\r\n\r\nconst MenuSelection = () => (\r\n  <Container className=\"game-selection-menu\">\r\n    <h3 className=\"game-selection-header\" data-qa=\"game-selection-header\">\r\n      Game Selection\r\n    </h3>\r\n    <Link to={COMPUTER}>\r\n      <Button variant=\"dark\" size=\"lg\" className=\"selection-button\">\r\n        VS Computer\r\n      </Button>\r\n    </Link>\r\n    <Link to={FRIEND}>\r\n      <Button variant=\"dark\" size=\"lg\" className=\"selection-button\">\r\n        VS Friend\r\n      </Button>\r\n    </Link>\r\n    <Link to={SCORE_BOARD}>\r\n      <Button variant=\"dark\" size=\"lg\" className=\"selection-button\">\r\n        Score Board\r\n      </Button>\r\n    </Link>\r\n  </Container>\r\n);\r\n\r\nexport default MenuSelection;\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nimport './component.css';\r\n\r\nimport MenuSelection from './menu-selection';\r\n\r\nconst LandingPage = () => (\r\n  <Container>\r\n    <Container className=\"game-description\">\r\n      <h3 data-qa=\"landing-page-description\">\r\n        This adaptation of the classic Tic-Tac-Toe where players are able to go\r\n        through their previous moves, play against a friend or against the\r\n        computer\r\n      </h3>\r\n      <h5 data-qa=\"landing-page-sub-header\">\r\n        Choose a selection & start playing!\r\n      </h5>\r\n    </Container>\r\n    <MenuSelection />\r\n  </Container>\r\n);\r\n\r\nexport default LandingPage;\r\n","const calculateWinner = (currentlyPlayedMoves) => {\r\n  const possibleWinningCombinations = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  /* For loop that goes through & checks that the array has the\r\n   winner combination positions in it */\r\n  for (\r\n    let winningCombinationIndex = 0;\r\n    winningCombinationIndex < possibleWinningCombinations.length;\r\n    winningCombinationIndex += 1\r\n  ) {\r\n    const [a, b, c] = possibleWinningCombinations[winningCombinationIndex];\r\n    /* If statement checks the 1st winning position in the array\r\n     equals the other 2 positions the returns the 1st position */\r\n    if (\r\n      currentlyPlayedMoves[a] &&\r\n      currentlyPlayedMoves[a] === currentlyPlayedMoves[b] &&\r\n      currentlyPlayedMoves[a] === currentlyPlayedMoves[c]\r\n    ) {\r\n      return currentlyPlayedMoves[a];\r\n    }\r\n  }\r\n  return undefined;\r\n};\r\n\r\nexport default calculateWinner;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport './component.css';\r\n\r\nconst Square = ({ onClick, value }) => (\r\n  <Button variant=\"secondary outline-dark\" className=\"square\" onClick={onClick}>\r\n    {value}\r\n  </Button>\r\n);\r\n\r\nSquare.propTypes = {\r\n  onClick: PropTypes.func,\r\n  value: PropTypes.string,\r\n};\r\n\r\nSquare.defaultProps = {\r\n  onClick: () => {},\r\n  value: '',\r\n};\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Container, Row } from 'react-bootstrap';\r\n\r\nimport Square from '../square';\r\n\r\nconst Board = ({ squares, onClick }) => (\r\n  <Container>\r\n    <Row>\r\n      <Square value={squares[0]} onClick={() => onClick(0)} />\r\n      <Square value={squares[1]} onClick={() => onClick(1)} />\r\n      <Square value={squares[2]} onClick={() => onClick(2)} />\r\n    </Row>\r\n    <Row>\r\n      <Square value={squares[3]} onClick={() => onClick(3)} />\r\n      <Square value={squares[4]} onClick={() => onClick(4)} />\r\n      <Square value={squares[5]} onClick={() => onClick(5)} />\r\n    </Row>\r\n    <Row>\r\n      <Square value={squares[6]} onClick={() => onClick(6)} />\r\n      <Square value={squares[7]} onClick={() => onClick(7)} />\r\n      <Square value={squares[8]} onClick={() => onClick(8)} />\r\n    </Row>\r\n  </Container>\r\n);\r\n\r\nBoard.propTypes = {\r\n  squares: PropTypes.arrayOf(PropTypes.string),\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nBoard.defaultProps = {\r\n  squares: [],\r\n  onClick: () => {},\r\n};\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './component.css';\r\n\r\nconst MoveHistory = ({ previousPlayerMoves }) => (\r\n  <div className=\"player-moves\">\r\n    <span className=\"history-header\">Go back to</span>\r\n    {previousPlayerMoves.map(({ buttonName, buttonClick }, index) => (\r\n      <Button\r\n        className=\"move-history\"\r\n        size=\"sm\"\r\n        variant=\"outline-dark\"\r\n        key={`${[index]}-${buttonName}`}\r\n        onClick={buttonClick}\r\n        data-qa=\"reset-to-move-history\"\r\n      >\r\n        {buttonName}\r\n      </Button>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nMoveHistory.propTypes = {\r\n  previousPlayerMoves: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      buttonName: PropTypes.string,\r\n      buttonClick: PropTypes.func,\r\n    })\r\n  ),\r\n};\r\n\r\nMoveHistory.defaultProps = {\r\n  previousPlayerMoves: [\r\n    {\r\n      buttonName: 'Restart',\r\n      buttonClick: () => {},\r\n    },\r\n  ],\r\n};\r\n\r\nexport default MoveHistory;\r\n","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './component.css';\r\n\r\nconst ScoreBanner = ({\r\n  winner,\r\n  moveNumber,\r\n  playerXScore,\r\n  playerOScore,\r\n  drawScore,\r\n  scoreForPlayerX,\r\n  scoreForPlayerO,\r\n  scoreForDraw,\r\n}) => (\r\n  <Table className=\"score-banner\">\r\n    <tbody>\r\n      <tr>\r\n        <th className=\"score-banner-head\">Player X Wins:</th>\r\n        <th className=\"score-banner-head\" data-qa=\"banner-head-draws\">\r\n          Draws:\r\n        </th>\r\n        <th className=\"score-banner-head\">Player O Wins:</th>\r\n      </tr>\r\n      <tr>\r\n        <td className=\"banner-scores\">\r\n          <span>{scoreForPlayerX(playerXScore, winner)}</span>\r\n        </td>\r\n        <td className=\"banner-scores\">\r\n          <span>{scoreForDraw(drawScore, winner, moveNumber)}</span>\r\n        </td>\r\n        <td className=\"banner-scores\">\r\n          <span>{scoreForPlayerO(playerOScore, winner)}</span>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </Table>\r\n);\r\n\r\nScoreBanner.propTypes = {\r\n  winner: PropTypes.string,\r\n  moveNumber: PropTypes.number,\r\n  playerXScore: PropTypes.number,\r\n  playerOScore: PropTypes.number,\r\n  drawScore: PropTypes.number,\r\n  scoreForPlayerX: PropTypes.func,\r\n  scoreForPlayerO: PropTypes.func,\r\n  scoreForDraw: PropTypes.func,\r\n};\r\n\r\nScoreBanner.defaultProps = {\r\n  winner: '',\r\n  moveNumber: 0,\r\n  playerXScore: 0,\r\n  playerOScore: 0,\r\n  drawScore: 0,\r\n  scoreForPlayerX: () => {},\r\n  scoreForPlayerO: () => {},\r\n  scoreForDraw: () => {},\r\n};\r\n\r\nexport default ScoreBanner;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './component.css';\r\n\r\nconst PageHeader = ({ pageTitle }) => (\r\n  <h1 className=\"page-title\" data-qa=\"page-title\">\r\n    {pageTitle}\r\n  </h1>\r\n);\r\n\r\nPageHeader.propTypes = {\r\n  pageTitle: PropTypes.string,\r\n};\r\n\r\nPageHeader.defaultProps = {\r\n  pageTitle: '',\r\n};\r\n\r\nexport default PageHeader;\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Board from '../../components/board';\r\nimport MoveHistory from '../../components/move-history';\r\nimport ScoreBanner from '../../components/score-banner';\r\nimport PageHeader from '../../components/page-header';\r\n\r\nimport { determineGameStatus } from './controller';\r\n\r\nconst PlayAgainstComputer = ({\r\n  winner,\r\n  moveNumber,\r\n  playerXScore,\r\n  playerOScore,\r\n  drawScore,\r\n  scoreForPlayerX,\r\n  scoreForPlayerO,\r\n  scoreForDraw,\r\n  previousPlayerMoves,\r\n  movesForPlayers,\r\n  squares,\r\n  xIsNext,\r\n  history,\r\n}) => (\r\n  <Container>\r\n    <PageHeader pageTitle=\"Playing against Computer\" />\r\n    <Container className=\"game\">\r\n      <div className=\"game-board\">\r\n        <div className=\"player-status\" data-qa=\"game-status\">\r\n          {determineGameStatus(winner, moveNumber, xIsNext)}\r\n        </div>\r\n        <Board\r\n          squares={squares}\r\n          onClick={(squareIndex) => {\r\n            movesForPlayers(squareIndex, xIsNext, history, moveNumber);\r\n          }}\r\n          data-qa=\"game-board\"\r\n        />\r\n      </div>\r\n      <MoveHistory previousPlayerMoves={previousPlayerMoves} />\r\n    </Container>\r\n    <ScoreBanner\r\n      winner={winner}\r\n      moveNumber={moveNumber}\r\n      playerXScore={playerXScore}\r\n      playerOScore={playerOScore}\r\n      drawScore={drawScore}\r\n      scoreForPlayerX={scoreForPlayerX}\r\n      scoreForPlayerO={scoreForPlayerO}\r\n      scoreForDraw={scoreForDraw}\r\n    />\r\n  </Container>\r\n);\r\n\r\nPlayAgainstComputer.propTypes = {\r\n  history: PropTypes.arrayOf(PropTypes.array),\r\n  winner: PropTypes.string,\r\n  movesForPlayers: PropTypes.func,\r\n  squares: PropTypes.arrayOf(PropTypes.string),\r\n  xIsNext: PropTypes.bool,\r\n  moveNumber: PropTypes.number,\r\n  previousPlayerMoves: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      buttonName: PropTypes.string,\r\n      buttonClick: PropTypes.func,\r\n    })\r\n  ),\r\n  playerXScore: PropTypes.number,\r\n  playerOScore: PropTypes.number,\r\n  drawScore: PropTypes.number,\r\n  scoreForPlayerX: PropTypes.func,\r\n  scoreForPlayerO: PropTypes.func,\r\n  scoreForDraw: PropTypes.func,\r\n};\r\n\r\nPlayAgainstComputer.defaultProps = {\r\n  history: [],\r\n  winner: '',\r\n  movesForPlayers: () => {},\r\n  squares: [],\r\n  xIsNext: true,\r\n  moveNumber: 0,\r\n  previousPlayerMoves: [\r\n    {\r\n      buttonName: 'Restart',\r\n      buttonClick: () => {},\r\n    },\r\n  ],\r\n  playerXScore: 0,\r\n  playerOScore: 0,\r\n  drawScore: 0,\r\n  scoreForPlayerX: () => {},\r\n  scoreForPlayerO: () => {},\r\n  scoreForDraw: () => {},\r\n};\r\n\r\nexport default PlayAgainstComputer;\r\n","export const determineGameStatus = (winner, moveNumber, xIsNext) => {\r\n  if (winner) {\r\n    return `${winner} is the Winner!`;\r\n  }\r\n  if (!winner && moveNumber >= 5) {\r\n    return 'Its a Draw!';\r\n  }\r\n\r\n  return `Next player is ${xIsNext ? 'X' : 'O'}`;\r\n};\r\n\r\nexport const getPlayersMoves = (history, moveNumber, squareIndex, xIsNext) => {\r\n  const currentHistory = history.slice(0, moveNumber + 1);\r\n  const currentMoves = currentHistory[moveNumber];\r\n  const currentSquaresPlayed = currentMoves.slice();\r\n\r\n  if (!currentSquaresPlayed[squareIndex]) {\r\n    currentSquaresPlayed[squareIndex] = 'X';\r\n\r\n    if (xIsNext === true || moveNumber === 0) {\r\n      const randomIndex = Math.floor(Math.random() * 9);\r\n      const nextAvailableIndex = currentSquaresPlayed.indexOf('');\r\n\r\n      if (currentSquaresPlayed[randomIndex] === 'X') {\r\n        currentSquaresPlayed[nextAvailableIndex] = 'O';\r\n        return currentSquaresPlayed;\r\n      }\r\n\r\n      if (currentSquaresPlayed[randomIndex] === 'O') {\r\n        currentSquaresPlayed[nextAvailableIndex] = 'O';\r\n        return currentSquaresPlayed;\r\n      }\r\n      currentSquaresPlayed[randomIndex] = 'O';\r\n    }\r\n  }\r\n  return currentSquaresPlayed;\r\n};\r\n","import { connect } from 'react-redux';\r\n\r\nimport {\r\n  computerMove,\r\n  goToMove,\r\n  setXScore,\r\n  setDrawScore,\r\n  setOScore,\r\n  gamesPlayed,\r\n} from '../../reducers/state-of-game/actions';\r\nimport calculateWinner from '../../utils/calculate-winner';\r\n\r\nimport { getPlayersMoves } from './controller';\r\nimport PlayAgainstComputer from './component';\r\n\r\nexport const mapStateToProps = ({\r\n  app: {\r\n    status: {\r\n      history,\r\n      xIsNext,\r\n      moveNumber,\r\n      playerXScore,\r\n      playerOScore,\r\n      drawScore,\r\n    },\r\n  },\r\n}) => ({\r\n  history,\r\n  moveNumber,\r\n  xIsNext,\r\n  playerXScore,\r\n  playerOScore,\r\n  drawScore,\r\n  squares: history[moveNumber],\r\n  winner: calculateWinner(history[moveNumber]),\r\n});\r\n\r\nexport const mapDispatchToProps = (dispatch) => ({\r\n  movesForPlayers: (squareIndex, xIsNext, history, moveNumber) => {\r\n    const currentMovesPlayed = getPlayersMoves(\r\n      history,\r\n      moveNumber,\r\n      squareIndex,\r\n      xIsNext\r\n    );\r\n    dispatch(computerMove({ squareIndex, currentMovesPlayed }));\r\n  },\r\n  jumpTo: (step) => dispatch(goToMove(step)),\r\n  scoreForPlayerX: (currentScore, winner) => {\r\n    if (winner === 'X') {\r\n      dispatch(setXScore(currentScore));\r\n      dispatch(gamesPlayed(currentScore));\r\n    }\r\n    return currentScore;\r\n  },\r\n  scoreForPlayerO: (currentScore, winner) => {\r\n    if (winner === 'O') {\r\n      dispatch(setOScore(currentScore));\r\n      dispatch(gamesPlayed(currentScore));\r\n    }\r\n    return currentScore;\r\n  },\r\n  scoreForDraw: (currentScore, winner, moveNumber) => {\r\n    if (winner === '' && moveNumber >= 5) {\r\n      dispatch(setDrawScore(currentScore));\r\n      dispatch(gamesPlayed(currentScore));\r\n    }\r\n    return currentScore;\r\n  },\r\n});\r\n\r\nexport const mergeProps = (stateProps, dispatchProps) => ({\r\n  ...stateProps,\r\n  ...dispatchProps,\r\n  previousPlayerMoves: stateProps.history.map((_, moveId) => ({\r\n    buttonName: moveId ? `Move #${moveId}` : 'Start',\r\n    buttonClick: () => dispatchProps.jumpTo(moveId),\r\n  })),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  mergeProps\r\n)(PlayAgainstComputer);\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Board from '../../components/board';\r\nimport ScoresBanner from '../../components/score-banner';\r\nimport MoveHistory from '../../components/move-history';\r\nimport PageHeader from '../../components/page-header';\r\n\r\nimport { determineGameStatus } from './controller';\r\n\r\nconst PlayAgainstFriend = ({\r\n  winner,\r\n  moveNumber,\r\n  playerXScore,\r\n  playerOScore,\r\n  drawScore,\r\n  scoreForPlayerX,\r\n  scoreForPlayerO,\r\n  scoreForDraw,\r\n  previousPlayerMoves,\r\n  onSelectSquare,\r\n  squares,\r\n  xIsNext,\r\n  history,\r\n}) => (\r\n  <Container>\r\n    <PageHeader pageTitle=\"Playing against Friend\" />\r\n    <Container className=\"game\">\r\n      <div className=\"game-board\">\r\n        <div className=\"player-status\" data-qa=\"game-status\">\r\n          {determineGameStatus(winner, moveNumber, xIsNext)}\r\n        </div>\r\n        <Board\r\n          squares={squares}\r\n          onClick={(squareIndex) => {\r\n            onSelectSquare(squareIndex, xIsNext, history, moveNumber);\r\n          }}\r\n          data-qa=\"game-board\"\r\n        />\r\n      </div>\r\n      <MoveHistory previousPlayerMoves={previousPlayerMoves} />\r\n    </Container>\r\n    <ScoresBanner\r\n      winner={winner}\r\n      moveNumber={moveNumber}\r\n      playerXScore={playerXScore}\r\n      playerOScore={playerOScore}\r\n      drawScore={drawScore}\r\n      scoreForPlayerX={scoreForPlayerX}\r\n      scoreForPlayerO={scoreForPlayerO}\r\n      scoreForDraw={scoreForDraw}\r\n    />\r\n  </Container>\r\n);\r\n\r\nPlayAgainstFriend.propTypes = {\r\n  history: PropTypes.arrayOf(PropTypes.array),\r\n  onSelectSquare: PropTypes.func,\r\n  winner: PropTypes.string,\r\n  squares: PropTypes.arrayOf(PropTypes.string),\r\n  xIsNext: PropTypes.bool,\r\n  moveNumber: PropTypes.number,\r\n  previousPlayerMoves: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      buttonName: PropTypes.string,\r\n      buttonClick: PropTypes.func,\r\n    })\r\n  ),\r\n  playerXScore: PropTypes.number,\r\n  playerOScore: PropTypes.number,\r\n  drawScore: PropTypes.number,\r\n  scoreForPlayerX: PropTypes.func,\r\n  scoreForPlayerO: PropTypes.func,\r\n  scoreForDraw: PropTypes.func,\r\n};\r\n\r\nPlayAgainstFriend.defaultProps = {\r\n  history: [],\r\n  onSelectSquare: () => {},\r\n  winner: '',\r\n  squares: [],\r\n  xIsNext: true,\r\n  moveNumber: 0,\r\n  previousPlayerMoves: [\r\n    {\r\n      buttonName: 'Restart',\r\n      buttonClick: () => {},\r\n    },\r\n  ],\r\n  playerXScore: 0,\r\n  playerOScore: 0,\r\n  drawScore: 0,\r\n  scoreForPlayerX: () => {},\r\n  scoreForPlayerO: () => {},\r\n  scoreForDraw: () => {},\r\n};\r\n\r\nexport default PlayAgainstFriend;\r\n","export const determineGameStatus = (winner, moveNumber, xIsNext) => {\r\n  if (winner) {\r\n    return `${winner} is the Winner!`;\r\n  }\r\n  if (!winner && moveNumber === 9) {\r\n    return 'Its a Draw!';\r\n  }\r\n  return `Next player is ${xIsNext ? 'X' : 'O'}`;\r\n};\r\n\r\nexport const getCurrentMovesPlayed = (\r\n  history,\r\n  moveNumber,\r\n  squareIndex,\r\n  xIsNext\r\n) => {\r\n  const currentHistory = history.slice(0, moveNumber + 1);\r\n  const currentMoves = currentHistory[moveNumber];\r\n  const currentSquaresPlayed = currentMoves.slice();\r\n\r\n  if (currentSquaresPlayed[squareIndex] === '') {\r\n    currentSquaresPlayed[squareIndex] = xIsNext ? 'X' : 'O';\r\n  }\r\n\r\n  return currentSquaresPlayed;\r\n};\r\n","import { connect } from 'react-redux';\r\n\r\nimport {\r\n  selectSquare,\r\n  goToMove,\r\n  setXScore,\r\n  setDrawScore,\r\n  setOScore,\r\n  gamesPlayed,\r\n} from '../../reducers/state-of-game/actions';\r\nimport calculateWinner from '../../utils/calculate-winner';\r\n\r\nimport { getCurrentMovesPlayed } from './controller';\r\nimport PlayAgainstFriend from './component';\r\n\r\nexport const mapStateToProps = ({\r\n  app: {\r\n    status: {\r\n      history,\r\n      xIsNext,\r\n      moveNumber,\r\n      playerXScore,\r\n      playerOScore,\r\n      drawScore,\r\n    },\r\n  },\r\n}) => ({\r\n  history,\r\n  moveNumber,\r\n  xIsNext,\r\n  playerXScore,\r\n  playerOScore,\r\n  drawScore,\r\n  squares: history[moveNumber],\r\n  winner: calculateWinner(history[moveNumber]),\r\n});\r\n\r\nexport const mapDispatchToProps = (dispatch) => ({\r\n  onSelectSquare: (squareIndex, nextPlayer, history, moveNumber) => {\r\n    const currentMovesPlayed = getCurrentMovesPlayed(\r\n      history,\r\n      moveNumber,\r\n      squareIndex,\r\n      nextPlayer\r\n    );\r\n    dispatch(selectSquare({ squareIndex, currentMovesPlayed }));\r\n  },\r\n  jumpTo: (step) => dispatch(goToMove(step)),\r\n  scoreForPlayerX: (currentScore, winner) => {\r\n    if (winner === 'X') {\r\n      dispatch(setXScore(currentScore));\r\n      dispatch(gamesPlayed(currentScore));\r\n    }\r\n    return currentScore;\r\n  },\r\n  scoreForPlayerO: (currentScore, winner) => {\r\n    if (winner === 'O') {\r\n      dispatch(setOScore(currentScore));\r\n      dispatch(gamesPlayed(currentScore));\r\n    }\r\n    return currentScore;\r\n  },\r\n  scoreForDraw: (currentScore, winner, moveNumber) => {\r\n    if (winner === '' && moveNumber === 9) {\r\n      dispatch(setDrawScore(currentScore));\r\n      dispatch(gamesPlayed(currentScore));\r\n    }\r\n    return currentScore;\r\n  },\r\n});\r\n\r\nexport const mergeProps = (stateProps, dispatchProps) => ({\r\n  ...stateProps,\r\n  ...dispatchProps,\r\n  previousPlayerMoves: stateProps.history.map((_, moveId) => ({\r\n    buttonName: moveId ? `Move #${moveId}` : 'Start',\r\n    buttonClick: () => dispatchProps.jumpTo(moveId),\r\n  })),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  mergeProps\r\n)(PlayAgainstFriend);\r\n","const calculateWinningAverage = (gamesPlayed, currentScoreOfPlayer) => {\r\n  const averageWinningRate = (currentScoreOfPlayer / gamesPlayed) * (100 / 1);\r\n  if (Number.isNaN(averageWinningRate) === true) {\r\n    return 0;\r\n  }\r\n  return averageWinningRate.toFixed(0);\r\n};\r\n\r\nexport default calculateWinningAverage;\r\n","import React from 'react';\r\nimport { Col, Button, Container } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './component.css';\r\n\r\nimport PageHeader from '../../components/page-header';\r\n\r\nimport calculateWinningAverage from './controller';\r\n\r\nconst ScoreBoard = ({\r\n  playerXScore,\r\n  playerOScore,\r\n  drawScore,\r\n  gamesPlayed,\r\n  resetGameState,\r\n}) => (\r\n  <div data-qa=\"score-table\">\r\n    <PageHeader pageTitle=\"Score Board\" />\r\n    <Container className=\"score-table\">\r\n      <div className=\"score-row\">\r\n        <Col className=\"score-head\">Player X</Col>\r\n        <Col className=\"score-head\">Player O</Col>\r\n      </div>\r\n      <div className=\"score-row\">\r\n        <Col className=\"score-sub-head\">Wins</Col>\r\n        <Col className=\"score-sub-head\">Draws</Col>\r\n        <Col className=\"score-sub-head\">Wins</Col>\r\n      </div>\r\n      <div className=\"score-row\">\r\n        <Col className=\"scores\" data-qa=\"player-x-score\">\r\n          {playerXScore}\r\n        </Col>\r\n        <Col className=\"scores\" data-qa=\"score-for-draw\">\r\n          {drawScore}\r\n        </Col>\r\n        <Col className=\"scores\" data-qa=\"player-o-score\">\r\n          {playerOScore}\r\n        </Col>\r\n      </div>\r\n      <div className=\"score-row\">\r\n        <Col className=\"score-sub-head\">Winning Rate</Col>\r\n        <Col className=\"score-sub-head\">Winning Rate</Col>\r\n      </div>\r\n      <div className=\"score-row\">\r\n        <Col className=\"scores\" data-qa=\"winning-rate-player-x\">\r\n          {calculateWinningAverage(gamesPlayed, playerXScore)}%\r\n        </Col>\r\n\r\n        <Col className=\"scores\" data-qa=\"winning-rate-player-o\">\r\n          {calculateWinningAverage(gamesPlayed, playerOScore)}%\r\n        </Col>\r\n      </div>\r\n      <Button\r\n        variant=\"warning\"\r\n        size=\"lg\"\r\n        className=\"rest-button\"\r\n        data-qa=\"rest-button\"\r\n        onClick={(actionPayload) => resetGameState(actionPayload)}\r\n      >\r\n        Reset Stats\r\n      </Button>\r\n    </Container>\r\n  </div>\r\n);\r\n\r\nScoreBoard.propTypes = {\r\n  playerXScore: PropTypes.number,\r\n  playerOScore: PropTypes.number,\r\n  drawScore: PropTypes.number,\r\n  gamesPlayed: PropTypes.number,\r\n  resetGameState: PropTypes.func,\r\n};\r\n\r\nScoreBoard.defaultProps = {\r\n  playerXScore: 0,\r\n  playerOScore: 0,\r\n  drawScore: 0,\r\n  gamesPlayed: 0,\r\n  resetGameState: () => {},\r\n};\r\n\r\nexport default ScoreBoard;\r\n","import { connect } from 'react-redux';\r\n\r\nimport { resetState } from '../../reducers/state-of-game/actions';\r\nimport calculateWinner from '../../utils/calculate-winner';\r\n\r\nimport ScoreBoard from './component';\r\n\r\nexport const mapStateToProps = ({\r\n  app: {\r\n    status: {\r\n      history,\r\n      xIsNext,\r\n      moveNumber,\r\n      playerXScore,\r\n      playerOScore,\r\n      drawScore,\r\n      gamesPlayed,\r\n    },\r\n  },\r\n}) => ({\r\n  history,\r\n  moveNumber,\r\n  xIsNext,\r\n  playerXScore,\r\n  playerOScore,\r\n  drawScore,\r\n  gamesPlayed,\r\n  squares: history[moveNumber],\r\n  winner: calculateWinner(history[moveNumber]),\r\n});\r\n\r\nexport const mapDispatchToProps = (dispatch) => ({\r\n  resetGameState: (actionPayload) => dispatch(resetState(actionPayload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ScoreBoard);\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport LandingPage from '../pages/landing-page';\r\nimport PlayAgainstComputer from '../pages/play-against-computer';\r\nimport PlayAgainstFriend from '../pages/play-against-friend';\r\nimport ScoreBoard from '../pages/score-board';\r\n\r\nimport { LANDING_PAGE, COMPUTER, FRIEND, SCORE_BOARD } from './urls';\r\n\r\nconst NavigationRoutes = () => (\r\n  <Switch>\r\n    <Route\r\n      exact\r\n      path={LANDING_PAGE}\r\n      component={LandingPage}\r\n      data-qa=\"landing-page\"\r\n    />\r\n    <Route\r\n      path={COMPUTER}\r\n      component={PlayAgainstComputer}\r\n      data-qa=\"vs-computer\"\r\n    />\r\n    <Route path={FRIEND} component={PlayAgainstFriend} data-qa=\"vs-player\" />\r\n    <Route path={SCORE_BOARD} component={ScoreBoard} data-qa=\"score-board\" />\r\n  </Switch>\r\n);\r\n\r\nexport default NavigationRoutes;\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport './index.css';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './reducers/store';\r\nimport NavigationBar from './components/nav-bar';\r\nimport NavigationRoutes from './routes/component';\r\n\r\nconst root = document.getElementById('root');\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <NavigationBar />\r\n      <NavigationRoutes />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  root\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}