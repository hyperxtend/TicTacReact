{"version":3,"sources":["serviceWorker.js","reducers/state-of-game/actions.js","reducers/state-of-game/reducer.js","reducers/app.js","reducers/index.js","reducers/store.js","services/local-storage/index.js","components/nav-bar/component.jsx","routes/urls.js","pages/landing-page/menu-selection/component.jsx","pages/landing-page/component.jsx","utils/calculate-winner/index.js","components/square/component.jsx","components/board/component.jsx","components/move-history/component.jsx","components/score-banner/component.jsx","components/page-header/component.jsx","pages/styles.js","pages/play-against-computer/component.jsx","pages/play-against-computer/controller.js","pages/play-against-computer/container.js","pages/play-against-friend/component.jsx","pages/play-against-friend/controller.js","pages/play-against-friend/container.js","pages/score-board/controller.js","pages/score-board/component.jsx","pages/score-board/container.js","routes/component.jsx","index.jsx"],"names":["Boolean","window","location","hostname","match","selectSquare","action","computerMove","goToMove","setXScore","setOScore","setDrawScore","gamesPlayed","resetState","initialState","history","Array","fill","xIsNext","winner","moveNumber","playerXScore","playerOScore","drawScore","combineReducers","status","state","type","slice","payload","currentMovesPlayed","length","app","store","createStore","reducers","registeredState","localStorage","getItem","JSON","parse","error","getState","composeWithDevTools","subscribe","currentState","stringify","setItem","saveState","StyledNavBar","styled","nav","StyledNavLink","NavLink","NavigationBar","to","StyledMenu","Container","SelectionHeader","h3","SelectionButton","Button","MenuSelection","data-qa","variant","size","DescriptionContainer","StyledDescription","SubHeader","h5","LandingPage","calculateWinner","currentlyPlayedMoves","possibleWinningCombinations","winningCombinationIndex","a","b","c","StyledSquare","Square","onClick","value","defaultProps","StyledBoardRow","Row","Board","squares","MoveHistoryContainer","div","HistoryHeader","span","MoveHistory","previousPlayerMoves","map","index","buttonName","buttonClick","key","ScoreBannerTable","Table","ScoreBannerHeader","th","ScoreBannerScores","td","ScoreBanner","scoreForPlayerX","scoreForPlayerO","scoreForDraw","StyledHeading","h1","PageHeader","pageTitle","GameContainer","GameBoardContainer","StyledGameStatus","PlayAgainstComputer","movesForPlayers","determineGameStatus","squareIndex","connect","dispatch","currentSquaresPlayed","randomIndex","Math","floor","random","nextAvailableIndex","indexOf","getPlayersMoves","jumpTo","step","currentScore","stateProps","dispatchProps","_","moveId","PlayAgainstFriend","onSelectSquare","nextPlayer","getCurrentMovesPlayed","calculateWinningAverage","currentScoreOfPlayer","averageWinningRate","Number","isNaN","toFixed","ScoreBoardContainer","ScoreBoardRow","TableHead","Col","StyledSubHeaders","StyledScores","ScoreBoard","resetGameState","actionPayload","NavigationRoutes","exact","path","component","root","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e933be2b.chunk.js","sourcesContent":["/* eslint-disable no-console */\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    window.location.hostname === '[::1]' ||\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      const registry = registration;\r\n      registry.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              console.log('Content is cached for offline use.');\r\n\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import action from 'payload-action-creator';\r\n\r\nexport const SELECT_SQUARE = 'SELECT_SQUARE';\r\nexport const COMPUTER_MOVE = 'COMPUTER_MOVE';\r\nexport const GO_TO_MOVE = 'GO_TO_MOVE';\r\nexport const SET_X_SCORE = 'SET_X_SCORE';\r\nexport const SET_O_SCORE = 'SET_O_SCORE';\r\nexport const SET_DRAW_SCORE = 'SET_DRAW_SCORE';\r\nexport const GAMES_PLAYED = 'GAMES_PLAYED';\r\nexport const RESET_STATE = 'RESET_STATE';\r\n\r\nexport const selectSquare = action(SELECT_SQUARE);\r\nexport const computerMove = action(COMPUTER_MOVE);\r\nexport const goToMove = action(GO_TO_MOVE);\r\nexport const setXScore = action(SET_X_SCORE);\r\nexport const setOScore = action(SET_O_SCORE);\r\nexport const setDrawScore = action(SET_DRAW_SCORE);\r\nexport const gamesPlayed = action(GAMES_PLAYED);\r\nexport const resetState = action(RESET_STATE);\r\n","import {\r\n  SELECT_SQUARE,\r\n  GO_TO_MOVE,\r\n  COMPUTER_MOVE,\r\n  SET_X_SCORE,\r\n  SET_O_SCORE,\r\n  SET_DRAW_SCORE,\r\n  GAMES_PLAYED,\r\n  RESET_STATE,\r\n} from './actions';\r\n\r\nexport const initialState = {\r\n  history: [Array(9).fill('')],\r\n  xIsNext: true,\r\n  winner: '',\r\n  moveNumber: 0,\r\n  playerXScore: 0,\r\n  playerOScore: 0,\r\n  drawScore: 0,\r\n  gamesPlayed: 0,\r\n};\r\n\r\nexport default (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case GO_TO_MOVE:\r\n      return {\r\n        ...state,\r\n        history: state.history.slice(0, action.payload + 1),\r\n        moveNumber: action.payload,\r\n        xIsNext: !(action.payload % 2),\r\n      };\r\n    case SELECT_SQUARE:\r\n      return {\r\n        ...state,\r\n        history: [...state.history, action.payload.currentMovesPlayed],\r\n        xIsNext: !state.xIsNext,\r\n        moveNumber: state.history.length,\r\n      };\r\n    case COMPUTER_MOVE:\r\n      return {\r\n        ...state,\r\n        history: [...state.history, action.payload.currentMovesPlayed],\r\n        xIsNext: state.xIsNext,\r\n        moveNumber: state.history.length,\r\n      };\r\n    case SET_X_SCORE:\r\n      return {\r\n        ...state,\r\n        winner: 'X',\r\n        playerXScore: state.playerXScore + 1,\r\n      };\r\n    case SET_O_SCORE:\r\n      return {\r\n        ...state,\r\n        winner: 'O',\r\n        playerOScore: state.playerOScore + 1,\r\n      };\r\n    case SET_DRAW_SCORE:\r\n      return {\r\n        ...state,\r\n        winner: '',\r\n        drawScore: state.drawScore + 1,\r\n      };\r\n    case GAMES_PLAYED:\r\n      return {\r\n        ...state,\r\n        history: [Array(9).fill('')],\r\n        xIsNext: true,\r\n        winner: '',\r\n        moveNumber: 0,\r\n        playerXScore: state.playerXScore,\r\n        playerOScore: state.playerOScore,\r\n        gamesPlayed: state.gamesPlayed + 1,\r\n      };\r\n    case RESET_STATE:\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\n\r\nimport status from './state-of-game';\r\n\r\nexport default combineReducers({ status });\r\n","import { combineReducers } from 'redux';\r\n\r\nimport app from './app';\r\n\r\nexport default combineReducers({ app });\r\n","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport { getState, saveState } from '../services/local-storage';\r\n\r\nimport reducers from './index';\r\n\r\nconst store = createStore(reducers, getState(), composeWithDevTools());\r\n\r\nstore.subscribe(() => {\r\n  saveState({\r\n    app: store.getState().app,\r\n  });\r\n});\r\n\r\nexport default store;\r\n","export const getState = () => {\r\n  try {\r\n    const registeredState = localStorage.getItem('state');\r\n    if (registeredState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(registeredState);\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (currentState) => {\r\n  try {\r\n    const registeredState = JSON.stringify(currentState);\r\n    localStorage.setItem('state', registeredState);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n  return undefined;\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { LANDING_PAGE, COMPUTER, FRIEND, SCORE_BOARD } from '../../routes/urls';\r\n\r\nconst StyledNavBar = styled.nav`\r\n  width: 100vw;\r\n  display: flex;\r\n  background: #22272c;\r\n  min-height: 10vh;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  @media (max-width: 1290px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst StyledNavLink = styled(NavLink)`\r\n  color: #e8e8e8;\r\n  cursor: pointer;\r\n  font-family: 'Roboto', sans-serif;\r\n  font-size: x-large;\r\n  font-weight: 800;\r\n  position: relative;\r\n  margin-right: 5%;\r\n  left: 30%;\r\n\r\n  &:nth-child(1) {\r\n    left: 10%;\r\n  }\r\n\r\n  &:hover {\r\n    color: #8c9ea3;\r\n    border-bottom: 5px solid #bbbbbe;\r\n    text-decoration: none;\r\n  }\r\n\r\n  &.active {\r\n    border-bottom: 5px solid #bbbbbe;\r\n  }\r\n\r\n  @media (max-width: 1290px) {\r\n   left: 5%;\r\n\r\n   &:nth-child(1) {\r\n    left: 5%;\r\n  }\r\n    }\r\n  }\r\n`;\r\n\r\nconst NavigationBar = () => (\r\n  <StyledNavBar>\r\n    <StyledNavLink to={LANDING_PAGE}>Tic-Tac-Toe</StyledNavLink>\r\n    <StyledNavLink to={COMPUTER}>VS Computer</StyledNavLink>\r\n    <StyledNavLink to={FRIEND}>VS Friend</StyledNavLink>\r\n    <StyledNavLink to={SCORE_BOARD}>Score Board</StyledNavLink>\r\n  </StyledNavBar>\r\n);\r\n\r\nexport default NavigationBar;\r\n","export const LANDING_PAGE = '/';\r\nexport const COMPUTER = '/Computer';\r\nexport const FRIEND = '/Friend';\r\nexport const SCORE_BOARD = '/ScoreBoard';\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nimport { COMPUTER, FRIEND, SCORE_BOARD } from '../../../routes/urls';\r\n\r\nconst StyledMenu = styled(Container)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  justify-content: center;\r\n  position: fixed;\r\n  margin-top: 3%;\r\n  background-color: #556174;\r\n  border: 1px solid #495464;\r\n  box-shadow: 4px 4px 5px #122338;\r\n`;\r\n\r\nconst SelectionHeader = styled.h3`\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  text-transform: uppercase;\r\n  font-size: 3em;\r\n  font-weight: 700;\r\n  color: #e8e8e8;\r\n  text-shadow: 4px 3px 0px #264b77, 9px 8px 0px #00243f;\r\n  margin-bottom: 3%;\r\n`;\r\n\r\nconst SelectionButton = styled(Button)`\r\n  width: 20vw;\r\n  margin-bottom: 2%;\r\n  font-weight: 500;\r\n  text-shadow: 3px 3px #495464;\r\n`;\r\n\r\nconst MenuSelection = () => (\r\n  <StyledMenu data-qa=\"game-selection-menu\">\r\n    <SelectionHeader data-qa=\"game-selection-header\">\r\n      Game Selection\r\n    </SelectionHeader>\r\n    <Link to={COMPUTER}>\r\n      <SelectionButton variant=\"dark\" size=\"lg\">\r\n        VS Computer\r\n      </SelectionButton>\r\n    </Link>\r\n    <Link to={FRIEND}>\r\n      <SelectionButton variant=\"dark\" size=\"lg\">\r\n        VS Friend\r\n      </SelectionButton>\r\n    </Link>\r\n    <Link to={SCORE_BOARD}>\r\n      <SelectionButton variant=\"dark\" size=\"lg\">\r\n        Score Board\r\n      </SelectionButton>\r\n    </Link>\r\n  </StyledMenu>\r\n);\r\n\r\nexport default MenuSelection;\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nimport MenuSelection from './menu-selection';\r\n\r\nconst DescriptionContainer = styled(Container)`\r\n  margin-top: 10%;\r\n  text-align: center;\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n`;\r\n\r\nconst StyledDescription = styled.h3`\r\n  color: #00243f;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst SubHeader = styled.h5`\r\n  margin-top: 5%;\r\n  color: #00243f;\r\n  text-transform: uppercase;\r\n  font-weight: 700;\r\n  font-size: 1.5em;\r\n  text-shadow: 2px 2px #abb3bc;\r\n}`;\r\n\r\nconst LandingPage = () => (\r\n  <Container>\r\n    <DescriptionContainer>\r\n      <StyledDescription data-qa=\"landing-page-description\">\r\n        This adaptation of the classic Tic-Tac-Toe where players are able to go\r\n        through their previous moves, play against a friend or against the\r\n        computer\r\n      </StyledDescription>\r\n      <SubHeader data-qa=\"landing-page-sub-header\">\r\n        Choose a selection & start playing!\r\n      </SubHeader>\r\n    </DescriptionContainer>\r\n    <MenuSelection />\r\n  </Container>\r\n);\r\n\r\nexport default LandingPage;\r\n","const calculateWinner = (currentlyPlayedMoves) => {\r\n  const possibleWinningCombinations = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  /* For loop that goes through & checks that the array has the\r\n   winner combination positions in it */\r\n  for (\r\n    let winningCombinationIndex = 0;\r\n    winningCombinationIndex < possibleWinningCombinations.length;\r\n    winningCombinationIndex += 1\r\n  ) {\r\n    const [a, b, c] = possibleWinningCombinations[winningCombinationIndex];\r\n    /* If statement checks the 1st winning position in the array\r\n     equals the other 2 positions the returns the 1st position */\r\n    if (\r\n      currentlyPlayedMoves[a] &&\r\n      currentlyPlayedMoves[a] === currentlyPlayedMoves[b] &&\r\n      currentlyPlayedMoves[a] === currentlyPlayedMoves[c]\r\n    ) {\r\n      return currentlyPlayedMoves[a];\r\n    }\r\n  }\r\n  return undefined;\r\n};\r\n\r\nexport default calculateWinner;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledSquare = styled(Button)`\r\n  width: 7vw;\r\n  height: 9vh;\r\n  margin: 0% 1% 0% 1%;\r\n  font-size: 2.5em;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst Square = ({ onClick, value }) => (\r\n  <StyledSquare\r\n    variant=\"secondary outline-dark\"\r\n    data-qa=\"square-button\"\r\n    onClick={onClick}\r\n  >\r\n    {value}\r\n  </StyledSquare>\r\n);\r\n\r\nSquare.propTypes = {\r\n  onClick: PropTypes.func,\r\n  value: PropTypes.string,\r\n};\r\n\r\nSquare.defaultProps = {\r\n  onClick: () => {},\r\n  value: '',\r\n};\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nimport Square from '../square';\r\n\r\nconst StyledBoardRow = styled(Row)`\r\n  height: 10vh;\r\n`;\r\n\r\nconst Board = ({ squares, onClick }) => (\r\n  <Container>\r\n    <StyledBoardRow>\r\n      <Square value={squares[0]} onClick={() => onClick(0)} />\r\n      <Square value={squares[1]} onClick={() => onClick(1)} />\r\n      <Square value={squares[2]} onClick={() => onClick(2)} />\r\n    </StyledBoardRow>\r\n    <StyledBoardRow>\r\n      <Square value={squares[3]} onClick={() => onClick(3)} />\r\n      <Square value={squares[4]} onClick={() => onClick(4)} />\r\n      <Square value={squares[5]} onClick={() => onClick(5)} />\r\n    </StyledBoardRow>\r\n    <StyledBoardRow>\r\n      <Square value={squares[6]} onClick={() => onClick(6)} />\r\n      <Square value={squares[7]} onClick={() => onClick(7)} />\r\n      <Square value={squares[8]} onClick={() => onClick(8)} />\r\n    </StyledBoardRow>\r\n  </Container>\r\n);\r\n\r\nBoard.propTypes = {\r\n  squares: PropTypes.arrayOf(PropTypes.string),\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nBoard.defaultProps = {\r\n  squares: [],\r\n  onClick: () => {},\r\n};\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst MoveHistoryContainer = styled.div`\r\n  width: 20%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 0;\r\n  margin-left: 3%;\r\n  text-align: center;\r\n  box-shadow: 0 0px 2px #00000029, 0 1px 3px #00000029;\r\n  padding: 2%;\r\n`;\r\n\r\nconst HistoryHeader = styled.span`\r\n  font-size: 1.2rem;\r\n  text-transform: uppercase;\r\n  margin-bottom: 5%;\r\n  font-weight: 600;\r\n  color: #22272c;\r\n  letter-spacing: 2px;\r\n`;\r\n\r\nconst MoveHistory = ({ previousPlayerMoves }) => (\r\n  <MoveHistoryContainer>\r\n    <HistoryHeader>Go back to</HistoryHeader>\r\n    {previousPlayerMoves.map(({ buttonName, buttonClick }, index) => (\r\n      <Button\r\n        size=\"sm\"\r\n        variant=\"outline-dark\"\r\n        key={`${[index]}-${buttonName}`}\r\n        onClick={buttonClick}\r\n        data-qa=\"reset-to-move-history\"\r\n      >\r\n        {buttonName}\r\n      </Button>\r\n    ))}\r\n  </MoveHistoryContainer>\r\n);\r\n\r\nMoveHistory.propTypes = {\r\n  previousPlayerMoves: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      buttonName: PropTypes.string,\r\n      buttonClick: PropTypes.func,\r\n    })\r\n  ),\r\n};\r\n\r\nMoveHistory.defaultProps = {\r\n  previousPlayerMoves: [\r\n    {\r\n      buttonName: 'Restart',\r\n      buttonClick: () => {},\r\n    },\r\n  ],\r\n};\r\n\r\nexport default MoveHistory;\r\n","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst ScoreBannerTable = styled(Table)`\r\n  margin-top: 5%;\r\n  margin-bottom: 5%;\r\n  justify-content: center;\r\n  text-align: center;\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\r\n`;\r\n\r\nconst ScoreBannerHeader = styled.th`\r\n  font-size: 1.3rem;\r\n  text-decoration: underline;\r\n`;\r\nconst ScoreBannerScores = styled.td`\r\n  text-align: center;\r\n  font-size: 1.6rem;\r\n`;\r\n\r\nconst ScoreBanner = ({\r\n  winner,\r\n  moveNumber,\r\n  playerXScore,\r\n  playerOScore,\r\n  drawScore,\r\n  scoreForPlayerX,\r\n  scoreForPlayerO,\r\n  scoreForDraw,\r\n}) => (\r\n  <ScoreBannerTable data-qa=\"score-banner\">\r\n    <tbody>\r\n      <tr>\r\n        <ScoreBannerHeader data-qa=\"banner-player-x-header\">\r\n          Player X Wins:\r\n        </ScoreBannerHeader>\r\n        <ScoreBannerHeader data-qa=\"banner-game-draws-header\">\r\n          Draws:\r\n        </ScoreBannerHeader>\r\n        <ScoreBannerHeader data-qa=\"banner-player-o-header\">\r\n          Player O Wins:\r\n        </ScoreBannerHeader>\r\n      </tr>\r\n      <tr>\r\n        <ScoreBannerScores data-qa=\"banner-player-x-score\">\r\n          {scoreForPlayerX(playerXScore, winner)}\r\n        </ScoreBannerScores>\r\n        <ScoreBannerScores data-qa=\"banner-draw-score\">\r\n          {scoreForDraw(drawScore, winner, moveNumber)}\r\n        </ScoreBannerScores>\r\n        <ScoreBannerScores data-qa=\"banner-player-o-score\">\r\n          {scoreForPlayerO(playerOScore, winner)}\r\n        </ScoreBannerScores>\r\n      </tr>\r\n    </tbody>\r\n  </ScoreBannerTable>\r\n);\r\n\r\nScoreBanner.propTypes = {\r\n  winner: PropTypes.string,\r\n  moveNumber: PropTypes.number,\r\n  playerXScore: PropTypes.number,\r\n  playerOScore: PropTypes.number,\r\n  drawScore: PropTypes.number,\r\n  scoreForPlayerX: PropTypes.func,\r\n  scoreForPlayerO: PropTypes.func,\r\n  scoreForDraw: PropTypes.func,\r\n};\r\n\r\nScoreBanner.defaultProps = {\r\n  winner: '',\r\n  moveNumber: 0,\r\n  playerXScore: 0,\r\n  playerOScore: 0,\r\n  drawScore: 0,\r\n  scoreForPlayerX: () => {},\r\n  scoreForPlayerO: () => {},\r\n  scoreForDraw: () => {},\r\n};\r\n\r\nexport default ScoreBanner;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledHeading = styled.h1`\r\n  color: #0a0b0c;\r\n  margin-top: 3%;\r\n  text-align: center;\r\n  font-weight: 700;\r\n  letter-spacing: 0.5rem;\r\n  opacity: 0.7;\r\n  text-transform: capitalize;\r\n`;\r\n\r\nconst PageHeader = ({ pageTitle }) => (\r\n  <StyledHeading data-qa=\"page-title\">{pageTitle}</StyledHeading>\r\n);\r\n\r\nPageHeader.propTypes = {\r\n  pageTitle: PropTypes.string,\r\n};\r\n\r\nPageHeader.defaultProps = {\r\n  pageTitle: '',\r\n};\r\n\r\nexport default PageHeader;\r\n","import styled from 'styled-components';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nexport const GameContainer = styled(Container)`\r\n  display: flex;\r\n  margin-top: 5%;\r\n  justify-content: center;\r\n  padding: 0;\r\n  position: relative;\r\n  left: 5%;\r\n`;\r\n\r\nexport const GameBoardContainer = styled.div`\r\n  margin-bottom: 5%;\r\n  height: 30vh;\r\n  width: 30vw;\r\n  margin-right: 3%;\r\n  position: relative;\r\n  right: 10%;\r\n`;\r\n\r\nexport const StyledGameStatus = styled.div`\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  font-size: 1.8em;\r\n  font-weight: 700;\r\n  text-decoration: underline;\r\n  margin-bottom: 5%;\r\n`;\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Board from '../../components/board';\r\nimport MoveHistory from '../../components/move-history';\r\nimport ScoreBanner from '../../components/score-banner';\r\nimport PageHeader from '../../components/page-header';\r\nimport { GameContainer, GameBoardContainer, StyledGameStatus } from '../styles';\r\n\r\nimport { determineGameStatus } from './controller';\r\n\r\nconst PlayAgainstComputer = ({\r\n  winner,\r\n  moveNumber,\r\n  playerXScore,\r\n  playerOScore,\r\n  drawScore,\r\n  scoreForPlayerX,\r\n  scoreForPlayerO,\r\n  scoreForDraw,\r\n  previousPlayerMoves,\r\n  movesForPlayers,\r\n  squares,\r\n  xIsNext,\r\n  history,\r\n}) => (\r\n  <Container>\r\n    <PageHeader pageTitle=\"Playing against Computer\" />\r\n    <GameContainer>\r\n      <GameBoardContainer>\r\n        <StyledGameStatus data-qa=\"game-status\">\r\n          {determineGameStatus(winner, moveNumber, xIsNext)}\r\n        </StyledGameStatus>\r\n        <Board\r\n          squares={squares}\r\n          onClick={(squareIndex) => {\r\n            movesForPlayers(squareIndex, xIsNext, history, moveNumber);\r\n          }}\r\n          data-qa=\"game-board\"\r\n        />\r\n      </GameBoardContainer>\r\n      <MoveHistory previousPlayerMoves={previousPlayerMoves} />\r\n    </GameContainer>\r\n    <ScoreBanner\r\n      winner={winner}\r\n      moveNumber={moveNumber}\r\n      playerXScore={playerXScore}\r\n      playerOScore={playerOScore}\r\n      drawScore={drawScore}\r\n      scoreForPlayerX={scoreForPlayerX}\r\n      scoreForPlayerO={scoreForPlayerO}\r\n      scoreForDraw={scoreForDraw}\r\n    />\r\n  </Container>\r\n);\r\n\r\nPlayAgainstComputer.propTypes = {\r\n  history: PropTypes.arrayOf(PropTypes.array),\r\n  winner: PropTypes.string,\r\n  movesForPlayers: PropTypes.func,\r\n  squares: PropTypes.arrayOf(PropTypes.string),\r\n  xIsNext: PropTypes.bool,\r\n  moveNumber: PropTypes.number,\r\n  previousPlayerMoves: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      buttonName: PropTypes.string,\r\n      buttonClick: PropTypes.func,\r\n    })\r\n  ),\r\n  playerXScore: PropTypes.number,\r\n  playerOScore: PropTypes.number,\r\n  drawScore: PropTypes.number,\r\n  scoreForPlayerX: PropTypes.func,\r\n  scoreForPlayerO: PropTypes.func,\r\n  scoreForDraw: PropTypes.func,\r\n};\r\n\r\nPlayAgainstComputer.defaultProps = {\r\n  history: [],\r\n  winner: '',\r\n  movesForPlayers: () => {},\r\n  squares: [],\r\n  xIsNext: true,\r\n  moveNumber: 0,\r\n  previousPlayerMoves: [\r\n    {\r\n      buttonName: 'Restart',\r\n      buttonClick: () => {},\r\n    },\r\n  ],\r\n  playerXScore: 0,\r\n  playerOScore: 0,\r\n  drawScore: 0,\r\n  scoreForPlayerX: () => {},\r\n  scoreForPlayerO: () => {},\r\n  scoreForDraw: () => {},\r\n};\r\n\r\nexport default PlayAgainstComputer;\r\n","export const determineGameStatus = (winner, moveNumber, xIsNext) => {\r\n  if (winner) {\r\n    return `${winner} is the Winner!`;\r\n  }\r\n  if (!winner && moveNumber >= 5) {\r\n    return 'Its a Draw!';\r\n  }\r\n\r\n  return `Next player is ${xIsNext ? 'X' : 'O'}`;\r\n};\r\n\r\nexport const getPlayersMoves = (history, moveNumber, squareIndex, xIsNext) => {\r\n  const currentHistory = history.slice(0, moveNumber + 1);\r\n  const currentMoves = currentHistory[moveNumber];\r\n  const currentSquaresPlayed = currentMoves.slice();\r\n\r\n  if (!currentSquaresPlayed[squareIndex]) {\r\n    currentSquaresPlayed[squareIndex] = 'X';\r\n\r\n    if (xIsNext === true || moveNumber === 0) {\r\n      const randomIndex = Math.floor(Math.random() * 9);\r\n      const nextAvailableIndex = currentSquaresPlayed.indexOf('');\r\n\r\n      if (currentSquaresPlayed[randomIndex] === 'X') {\r\n        currentSquaresPlayed[nextAvailableIndex] = 'O';\r\n        return currentSquaresPlayed;\r\n      }\r\n\r\n      if (currentSquaresPlayed[randomIndex] === 'O') {\r\n        currentSquaresPlayed[nextAvailableIndex] = 'O';\r\n        return currentSquaresPlayed;\r\n      }\r\n      currentSquaresPlayed[randomIndex] = 'O';\r\n    }\r\n  }\r\n  return currentSquaresPlayed;\r\n};\r\n","import { connect } from 'react-redux';\r\n\r\nimport {\r\n  computerMove,\r\n  goToMove,\r\n  setXScore,\r\n  setDrawScore,\r\n  setOScore,\r\n  gamesPlayed,\r\n} from '../../reducers/state-of-game/actions';\r\nimport calculateWinner from '../../utils/calculate-winner';\r\n\r\nimport { getPlayersMoves } from './controller';\r\nimport PlayAgainstComputer from './component';\r\n\r\nexport const mapStateToProps = ({\r\n  app: {\r\n    status: {\r\n      history,\r\n      xIsNext,\r\n      moveNumber,\r\n      playerXScore,\r\n      playerOScore,\r\n      drawScore,\r\n    },\r\n  },\r\n}) => ({\r\n  history,\r\n  moveNumber,\r\n  xIsNext,\r\n  playerXScore,\r\n  playerOScore,\r\n  drawScore,\r\n  squares: history[moveNumber],\r\n  winner: calculateWinner(history[moveNumber]),\r\n});\r\n\r\nexport const mapDispatchToProps = (dispatch) => ({\r\n  movesForPlayers: (squareIndex, xIsNext, history, moveNumber) => {\r\n    const currentMovesPlayed = getPlayersMoves(\r\n      history,\r\n      moveNumber,\r\n      squareIndex,\r\n      xIsNext\r\n    );\r\n    dispatch(computerMove({ squareIndex, currentMovesPlayed }));\r\n  },\r\n  jumpTo: (step) => dispatch(goToMove(step)),\r\n  scoreForPlayerX: (currentScore, winner) => {\r\n    if (winner === 'X') {\r\n      dispatch(setXScore(currentScore));\r\n      dispatch(gamesPlayed(currentScore));\r\n    }\r\n    return currentScore;\r\n  },\r\n  scoreForPlayerO: (currentScore, winner) => {\r\n    if (winner === 'O') {\r\n      dispatch(setOScore(currentScore));\r\n      dispatch(gamesPlayed(currentScore));\r\n    }\r\n    return currentScore;\r\n  },\r\n  scoreForDraw: (currentScore, winner, moveNumber) => {\r\n    if (winner === '' && moveNumber >= 5) {\r\n      dispatch(setDrawScore(currentScore));\r\n      dispatch(gamesPlayed(currentScore));\r\n    }\r\n    return currentScore;\r\n  },\r\n});\r\n\r\nexport const mergeProps = (stateProps, dispatchProps) => ({\r\n  ...stateProps,\r\n  ...dispatchProps,\r\n  previousPlayerMoves: stateProps.history.map((_, moveId) => ({\r\n    buttonName: moveId ? `Move #${moveId}` : 'Start',\r\n    buttonClick: () => dispatchProps.jumpTo(moveId),\r\n  })),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  mergeProps\r\n)(PlayAgainstComputer);\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Board from '../../components/board';\r\nimport ScoresBanner from '../../components/score-banner';\r\nimport MoveHistory from '../../components/move-history';\r\nimport PageHeader from '../../components/page-header';\r\nimport { GameContainer, GameBoardContainer, StyledGameStatus } from '../styles';\r\n\r\nimport { determineGameStatus } from './controller';\r\n\r\nconst PlayAgainstFriend = ({\r\n  winner,\r\n  moveNumber,\r\n  playerXScore,\r\n  playerOScore,\r\n  drawScore,\r\n  scoreForPlayerX,\r\n  scoreForPlayerO,\r\n  scoreForDraw,\r\n  previousPlayerMoves,\r\n  onSelectSquare,\r\n  squares,\r\n  xIsNext,\r\n  history,\r\n}) => (\r\n  <Container>\r\n    <PageHeader pageTitle=\"Playing against Friend\" />\r\n    <GameContainer>\r\n      <GameBoardContainer>\r\n        <StyledGameStatus data-qa=\"game-status\">\r\n          {determineGameStatus(winner, moveNumber, xIsNext)}\r\n        </StyledGameStatus>\r\n        <Board\r\n          squares={squares}\r\n          onClick={(squareIndex) => {\r\n            onSelectSquare(squareIndex, xIsNext, history, moveNumber);\r\n          }}\r\n          data-qa=\"game-board\"\r\n        />\r\n      </GameBoardContainer>\r\n      <MoveHistory previousPlayerMoves={previousPlayerMoves} />\r\n    </GameContainer>\r\n    <ScoresBanner\r\n      winner={winner}\r\n      moveNumber={moveNumber}\r\n      playerXScore={playerXScore}\r\n      playerOScore={playerOScore}\r\n      drawScore={drawScore}\r\n      scoreForPlayerX={scoreForPlayerX}\r\n      scoreForPlayerO={scoreForPlayerO}\r\n      scoreForDraw={scoreForDraw}\r\n    />\r\n  </Container>\r\n);\r\n\r\nPlayAgainstFriend.propTypes = {\r\n  history: PropTypes.arrayOf(PropTypes.array),\r\n  onSelectSquare: PropTypes.func,\r\n  winner: PropTypes.string,\r\n  squares: PropTypes.arrayOf(PropTypes.string),\r\n  xIsNext: PropTypes.bool,\r\n  moveNumber: PropTypes.number,\r\n  previousPlayerMoves: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      buttonName: PropTypes.string,\r\n      buttonClick: PropTypes.func,\r\n    })\r\n  ),\r\n  playerXScore: PropTypes.number,\r\n  playerOScore: PropTypes.number,\r\n  drawScore: PropTypes.number,\r\n  scoreForPlayerX: PropTypes.func,\r\n  scoreForPlayerO: PropTypes.func,\r\n  scoreForDraw: PropTypes.func,\r\n};\r\n\r\nPlayAgainstFriend.defaultProps = {\r\n  history: [],\r\n  onSelectSquare: () => {},\r\n  winner: '',\r\n  squares: [],\r\n  xIsNext: true,\r\n  moveNumber: 0,\r\n  previousPlayerMoves: [\r\n    {\r\n      buttonName: 'Restart',\r\n      buttonClick: () => {},\r\n    },\r\n  ],\r\n  playerXScore: 0,\r\n  playerOScore: 0,\r\n  drawScore: 0,\r\n  scoreForPlayerX: () => {},\r\n  scoreForPlayerO: () => {},\r\n  scoreForDraw: () => {},\r\n};\r\n\r\nexport default PlayAgainstFriend;\r\n","export const determineGameStatus = (winner, moveNumber, xIsNext) => {\r\n  if (winner) {\r\n    return `${winner} is the Winner!`;\r\n  }\r\n  if (!winner && moveNumber === 9) {\r\n    return 'Its a Draw!';\r\n  }\r\n  return `Next player is ${xIsNext ? 'X' : 'O'}`;\r\n};\r\n\r\nexport const getCurrentMovesPlayed = (\r\n  history,\r\n  moveNumber,\r\n  squareIndex,\r\n  xIsNext\r\n) => {\r\n  const currentHistory = history.slice(0, moveNumber + 1);\r\n  const currentMoves = currentHistory[moveNumber];\r\n  const currentSquaresPlayed = currentMoves.slice();\r\n\r\n  if (currentSquaresPlayed[squareIndex] === '') {\r\n    currentSquaresPlayed[squareIndex] = xIsNext ? 'X' : 'O';\r\n  }\r\n\r\n  return currentSquaresPlayed;\r\n};\r\n","import { connect } from 'react-redux';\r\n\r\nimport {\r\n  selectSquare,\r\n  goToMove,\r\n  setXScore,\r\n  setDrawScore,\r\n  setOScore,\r\n  gamesPlayed,\r\n} from '../../reducers/state-of-game/actions';\r\nimport calculateWinner from '../../utils/calculate-winner';\r\n\r\nimport { getCurrentMovesPlayed } from './controller';\r\nimport PlayAgainstFriend from './component';\r\n\r\nexport const mapStateToProps = ({\r\n  app: {\r\n    status: {\r\n      history,\r\n      xIsNext,\r\n      moveNumber,\r\n      playerXScore,\r\n      playerOScore,\r\n      drawScore,\r\n    },\r\n  },\r\n}) => ({\r\n  history,\r\n  moveNumber,\r\n  xIsNext,\r\n  playerXScore,\r\n  playerOScore,\r\n  drawScore,\r\n  squares: history[moveNumber],\r\n  winner: calculateWinner(history[moveNumber]),\r\n});\r\n\r\nexport const mapDispatchToProps = (dispatch) => ({\r\n  onSelectSquare: (squareIndex, nextPlayer, history, moveNumber) => {\r\n    const currentMovesPlayed = getCurrentMovesPlayed(\r\n      history,\r\n      moveNumber,\r\n      squareIndex,\r\n      nextPlayer\r\n    );\r\n    dispatch(selectSquare({ squareIndex, currentMovesPlayed }));\r\n  },\r\n  jumpTo: (step) => dispatch(goToMove(step)),\r\n  scoreForPlayerX: (currentScore, winner) => {\r\n    if (winner === 'X') {\r\n      dispatch(setXScore(currentScore));\r\n      dispatch(gamesPlayed(currentScore));\r\n    }\r\n    return currentScore;\r\n  },\r\n  scoreForPlayerO: (currentScore, winner) => {\r\n    if (winner === 'O') {\r\n      dispatch(setOScore(currentScore));\r\n      dispatch(gamesPlayed(currentScore));\r\n    }\r\n    return currentScore;\r\n  },\r\n  scoreForDraw: (currentScore, winner, moveNumber) => {\r\n    if (winner === '' && moveNumber === 9) {\r\n      dispatch(setDrawScore(currentScore));\r\n      dispatch(gamesPlayed(currentScore));\r\n    }\r\n    return currentScore;\r\n  },\r\n});\r\n\r\nexport const mergeProps = (stateProps, dispatchProps) => ({\r\n  ...stateProps,\r\n  ...dispatchProps,\r\n  previousPlayerMoves: stateProps.history.map((_, moveId) => ({\r\n    buttonName: moveId ? `Move #${moveId}` : 'Start',\r\n    buttonClick: () => dispatchProps.jumpTo(moveId),\r\n  })),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n  mergeProps\r\n)(PlayAgainstFriend);\r\n","const calculateWinningAverage = (gamesPlayed, currentScoreOfPlayer) => {\r\n  const averageWinningRate = (currentScoreOfPlayer / gamesPlayed) * (100 / 1);\r\n  if (Number.isNaN(averageWinningRate) === true) {\r\n    return 0;\r\n  }\r\n  return averageWinningRate.toFixed(0);\r\n};\r\n\r\nexport default calculateWinningAverage;\r\n","import React from 'react';\r\nimport { Col, Button, Container } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nimport PageHeader from '../../components/page-header';\r\n\r\nimport calculateWinningAverage from './controller';\r\n\r\nconst ScoreBoardContainer = styled(Container)`\r\n  width: 50vw;\r\n  height: 40vh;\r\n  margin: 0 auto;\r\n  padding: 0;\r\n  margin-top: 5%;\r\n  justify-content: center;\r\n  text-align: center;\r\n  position: relative;\r\n  box-shadow: 0 19px 38px rgba(0, 0, 0, 0.3), 0 15px 12px rgba(0, 0, 0, 0.22);\r\n`;\r\n\r\nconst ScoreBoardRow = styled.div`\r\n  display: flex;\r\n  margin-top: 2.5%;\r\n  margin-bottom: 2.5%;\r\n`;\r\n\r\nconst TableHead = styled(Col)`\r\n  font-size: 3rem;\r\n  font-weight: 700;\r\n  text-decoration: underline;\r\n`;\r\n\r\nconst StyledSubHeaders = styled(Col)`\r\n  font-size: 2rem;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst StyledScores = styled(Col)`\r\n  font-size: 1.7rem;\r\n`;\r\n\r\nconst ScoreBoard = ({\r\n  playerXScore,\r\n  playerOScore,\r\n  drawScore,\r\n  gamesPlayed,\r\n  resetGameState,\r\n}) => (\r\n  <>\r\n    <PageHeader pageTitle=\"Score Board\" />\r\n    <ScoreBoardContainer data-qa=\"score-table\">\r\n      <ScoreBoardRow>\r\n        <TableHead>Player X</TableHead>\r\n        <TableHead>Player O</TableHead>\r\n      </ScoreBoardRow>\r\n      <ScoreBoardRow>\r\n        <StyledSubHeaders>Wins</StyledSubHeaders>\r\n        <StyledSubHeaders>Draws</StyledSubHeaders>\r\n        <StyledSubHeaders>Wins</StyledSubHeaders>\r\n      </ScoreBoardRow>\r\n      <ScoreBoardRow>\r\n        <StyledScores data-qa=\"player-x-score\">{playerXScore}</StyledScores>\r\n        <StyledScores data-qa=\"score-for-draw\">{drawScore}</StyledScores>\r\n        <StyledScores data-qa=\"player-o-score\">{playerOScore}</StyledScores>\r\n      </ScoreBoardRow>\r\n      <ScoreBoardRow>\r\n        <StyledSubHeaders>Winning Rate</StyledSubHeaders>\r\n        <StyledSubHeaders>Winning Rate</StyledSubHeaders>\r\n      </ScoreBoardRow>\r\n      <ScoreBoardRow>\r\n        <StyledScores data-qa=\"winning-rate-player-x\">\r\n          {calculateWinningAverage(gamesPlayed, playerXScore)}%\r\n        </StyledScores>\r\n        <StyledScores data-qa=\"winning-rate-player-o\">\r\n          {calculateWinningAverage(gamesPlayed, playerOScore)}%\r\n        </StyledScores>\r\n      </ScoreBoardRow>\r\n      <Button\r\n        variant=\"warning\"\r\n        size=\"lg\"\r\n        data-qa=\"rest-button\"\r\n        onClick={(actionPayload) => resetGameState(actionPayload)}\r\n      >\r\n        Reset Stats\r\n      </Button>\r\n    </ScoreBoardContainer>\r\n  </>\r\n);\r\n\r\nScoreBoard.propTypes = {\r\n  playerXScore: PropTypes.number,\r\n  playerOScore: PropTypes.number,\r\n  drawScore: PropTypes.number,\r\n  gamesPlayed: PropTypes.number,\r\n  resetGameState: PropTypes.func,\r\n};\r\n\r\nScoreBoard.defaultProps = {\r\n  playerXScore: 0,\r\n  playerOScore: 0,\r\n  drawScore: 0,\r\n  gamesPlayed: 0,\r\n  resetGameState: () => {},\r\n};\r\n\r\nexport default ScoreBoard;\r\n","import { connect } from 'react-redux';\r\n\r\nimport { resetState } from '../../reducers/state-of-game/actions';\r\nimport calculateWinner from '../../utils/calculate-winner';\r\n\r\nimport ScoreBoard from './component';\r\n\r\nexport const mapStateToProps = ({\r\n  app: {\r\n    status: {\r\n      history,\r\n      xIsNext,\r\n      moveNumber,\r\n      playerXScore,\r\n      playerOScore,\r\n      drawScore,\r\n      gamesPlayed,\r\n    },\r\n  },\r\n}) => ({\r\n  history,\r\n  moveNumber,\r\n  xIsNext,\r\n  playerXScore,\r\n  playerOScore,\r\n  drawScore,\r\n  gamesPlayed,\r\n  squares: history[moveNumber],\r\n  winner: calculateWinner(history[moveNumber]),\r\n});\r\n\r\nexport const mapDispatchToProps = (dispatch) => ({\r\n  resetGameState: (actionPayload) => dispatch(resetState(actionPayload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ScoreBoard);\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport LandingPage from '../pages/landing-page';\r\nimport PlayAgainstComputer from '../pages/play-against-computer';\r\nimport PlayAgainstFriend from '../pages/play-against-friend';\r\nimport ScoreBoard from '../pages/score-board';\r\n\r\nimport { LANDING_PAGE, COMPUTER, FRIEND, SCORE_BOARD } from './urls';\r\n\r\nconst NavigationRoutes = () => (\r\n  <Switch>\r\n    <Route\r\n      exact\r\n      path={LANDING_PAGE}\r\n      component={LandingPage}\r\n      data-qa=\"landing-page\"\r\n    />\r\n    <Route\r\n      path={COMPUTER}\r\n      component={PlayAgainstComputer}\r\n      data-qa=\"vs-computer\"\r\n    />\r\n    <Route path={FRIEND} component={PlayAgainstFriend} data-qa=\"vs-player\" />\r\n    <Route path={SCORE_BOARD} component={ScoreBoard} data-qa=\"score-board\" />\r\n  </Switch>\r\n);\r\n\r\nexport default NavigationRoutes;\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './reducers/store';\r\nimport NavigationBar from './components/nav-bar';\r\nimport NavigationRoutes from './routes/component';\r\n\r\nconst root = document.getElementById('root');\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <NavigationBar />\r\n      <NavigationRoutes />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  root\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}